My django based website under development has encountered issue so i want you to list down the problem i stated here, analze my codes and tell me if to start solving.


A. My website is having issue in creating course, product and job. When clicked on submit button, It will just load new form again with empty fields.

Now, this is happening in different scenerios
1. Course: When creating course, it will load courses page and no notification to show to user that the course is in pending review by admin. When i go to the admin panel, i see the course under review and when i wanna approve, it directs me to default rough django admin interface with red in all the fields, telling me to fill them. Lol. WHile the approve page is showing me all details the user has entered.

2. Job: When creating job, it loads jobs page with no notification, but the admin does not show a job is pending for approval. Meaning, admin does not see the job posted. Pls fix

3. Product: The creation error workflow is same as Course. No notification of being sent for review and approval, taking to django admin giving errors.

B. When handling payment method, Let admin be able to configure monnify and select from all available banks from monnify, which bank the admin want to let the user get account for. The default is Monniepoint, but admin can add more, remove/deactivates. (Also, when user want to fund account, user can deactivate or activate banks available, so I want to make the code generate account number for each user after admin approves their kyc. Currently the code does not have kyc section in its ptofile html. KYC should ask for full legal name, address, BVN/NIN text field, upload picture if NIN. (Pls include all fields that will be needed by monnify.). Then after hitting, Verify,

So when user completes their kyc, send the request to admin, when admin approves, (any error on account generation will be here with detailed debugging steps) it generates account numbers for users. Now, the code does not have account auto generate configuration so implement it.

Now, when account has been generated, pls handle the rest and credit the user account after success from monnify.


C. Also, there is a mismatch in admin category creation and category that shows when creating things like course, product, jobs. and in the listing filters too. (Will share their html too later)

D. There is no template for Managing course, products, jobs so pls do that. Give me links to access them too.

E. The notification/transactions section is not showing anything the user has done. All codes/templates will be shared

F. The admin notification creation is working but it is not being displayed as pop up everytime/when user logged in.

Now, i will be sending needed codes so you will understand everything (Please let me know if you need more before starting).

But first, see sql and project dir before codes;

DIR:
C:\Users\dell\Documents\codes\VinajiFinal\filelist.txt
C:\Users\dell\Documents\codes\VinajiFinal\g.txt
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\db.sqlite3
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dump.sql
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\manage.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\p.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\README.MD
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\static
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\management
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\signals.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\management\commands
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\management\commands\seed_initial_data.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations\0002_alter_userprofile_referred_by.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations\__pycache__\0002_alter_userprofile_referred_by.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\accounts\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\affiliates\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\serializers.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__\serializers.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\api\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\blog\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations\0002_alter_course_category.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations\__pycache__\0002_alter_course_category.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\courses\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\dashboard\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\0002_job_company_logo.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\0003_alter_job_category.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\__pycache__\0002_job_company_logo.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\__pycache__\0003_alter_job_category.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\jobs\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\course_thumbnails
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\product_files
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\product_thumbnails
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\profile_pics
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\sample_files
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\course_thumbnails\Screenshot_2024-10-22_143325.png
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\product_files\Document11.pdf
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\product_thumbnails\InShot_20241129_131536365.jpg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\profile_pics\batch_218964331_356737129356709_1180732076552714248_n_1.jpg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\profile_pics\InShot_20241129_131536365.jpg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\profile_pics\InShot_20241129_131536365222.jpg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\profile_pics\_121481567_253625798_3050561185224245_8673544965146649253_n.jpg.webp
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\media\sample_files\Google_AI_Studio_2025-07-18T16_43_07.382Z.png
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\mentorship\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\payments\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\pricing\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\0002_productimage_promocode_product_features_product_tags_and_more.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\0003_alter_product_category.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\__pycache__\0002_productimage_promocode_product_features_product_tags_and_more.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\__pycache__\0003_alter_product_category.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\products\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\search\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\context_processors.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations\0002_adminnotification_sitesetting_deposit_mode_and_more.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations\__pycache__\0002_adminnotification_sitesetting_deposit_mode_and_more.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\context_processors.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\site_core\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\static\css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\static\css\style.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\autocomplete.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\base.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\changelists.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\dark_mode.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\dashboard.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\forms.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\login.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\nav_sidebar.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\responsive.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\responsive_rtl.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\rtl.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\vendor
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\widgets.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\vendor\select2
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\vendor\select2\LICENSE-SELECT2.md
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\vendor\select2\select2.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\css\vendor\select2\select2.min.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\calendar-icons.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\gis
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-addlink.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-alert.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-calendar.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-changelink.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-clock.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-deletelink.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-no.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-unknown-alt.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-unknown.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-viewlink.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\icon-yes.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\inline-delete.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\LICENSE
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\README.txt
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\search.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\selector-icons.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\sorting-icons.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\tooltag-add.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\tooltag-arrowright.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\gis\move_vertex_off.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\img\gis\move_vertex_on.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\actions.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\admin
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\autocomplete.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\calendar.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\cancel.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\change_form.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\collapse.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\core.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\filters.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\inlines.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\jquery.init.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\nav_sidebar.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\popup_response.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\prepopulate.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\prepopulate_init.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\SelectBox.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\SelectFilter2.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\theme.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\urlify.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\admin\DateTimeShortcuts.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\admin\RelatedObjectLookups.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\jquery
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\xregexp
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\jquery\jquery.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\jquery\jquery.min.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\jquery\LICENSE.txt
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\LICENSE.md
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\select2.full.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\select2.full.min.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\af.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ar.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\az.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\bg.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\bn.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\bs.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ca.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\cs.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\da.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\de.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\dsb.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\el.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\en.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\es.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\et.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\eu.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\fa.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\fi.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\fr.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\gl.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\he.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\hi.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\hr.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\hsb.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\hu.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\hy.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\id.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\is.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\it.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ja.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ka.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\km.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ko.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\lt.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\lv.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\mk.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ms.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\nb.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ne.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\nl.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\pl.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ps.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\pt-BR.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\pt.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ro.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\ru.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\sk.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\sl.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\sq.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\sr-Cyrl.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\sr.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\sv.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\th.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\tk.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\tr.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\uk.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\vi.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\zh-CN.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\select2\i18n\zh-TW.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\xregexp\LICENSE.txt
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\xregexp\xregexp.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\admin\js\vendor\xregexp\xregexp.min.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\css\style.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\img
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\bootstrap-theme.min.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\bootstrap-theme.min.css.map
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\bootstrap-tweaks.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\bootstrap.min.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\bootstrap.min.css.map
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\default.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\font-awesome-4.0.3.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\css\prettify.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\img
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\css\base.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\css\highlight.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\css\jquery.json-view.min.css
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\img\favicon.ico
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\img\grid.png
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\js\api.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\js\highlight.pack.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\docs\js\jquery.json-view.min.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\fontawesome-webfont.eot
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\fontawesome-webfont.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\fontawesome-webfont.ttf
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\fontawesome-webfont.woff
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\glyphicons-halflings-regular.eot
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\glyphicons-halflings-regular.svg
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\glyphicons-halflings-regular.ttf
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\glyphicons-halflings-regular.woff
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\fonts\glyphicons-halflings-regular.woff2
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\img\glyphicons-halflings-white.png
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\img\glyphicons-halflings.png
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\img\grid.png
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\ajax-form.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\bootstrap.min.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\coreapi-0.1.1.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\csrf.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\default.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\jquery-3.7.1.min.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\load-ajax-form.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\staticfiles\rest_framework\js\prettify-min.js
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\affiliates
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\base.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\blog
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\courses
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\dashboard
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\jobs
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\mentorship
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\payments
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\pricing
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\products
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\search
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\transactions
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\auth
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\profile
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\auth\login.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\auth\register.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\profile\bank_account_form.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\profile\crypto_wallet_form.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\profile\edit.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\profile\public.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\accounts\profile\view.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\analytics.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\category_management.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\dashboard.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\financial_management.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\moderation.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\notification_management.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\settings.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\user_detail.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\admin_panel\user_management.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\affiliates\dashboard.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\affiliates\referrals.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\blog\create.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\blog\detail.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\blog\list.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\blog\manage.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\courses\create.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\courses\detail.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\courses\list.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\dashboard\dashboard.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\jobs\create.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\jobs\detail.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\jobs\edit.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\jobs\list.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\mentorship\apply.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\mentorship\list.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\mentorship\manage.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\payments\add_money.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\payments\transfer.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\payments\withdraw.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\pricing\list.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\pricing\subscribe.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\products\create.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\products\detail.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\products\list.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\search\results.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\transactions\detail.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\transactions\list.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\templates\transactions\notifications.html
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\admin.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\apps.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\forms.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\migrations
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\models.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\tests.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\utils.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\views.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\migrations\0001_initial.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\migrations\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\migrations\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\migrations\__pycache__\0001_initial.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\migrations\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\admin.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\apps.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\forms.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\models.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\utils.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\views.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\transactions\__pycache__\__init__.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\asgi.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\settings.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\urls.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\wsgi.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\__init__.py
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\__pycache__
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\__pycache__\settings.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\__pycache__\urls.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\__pycache__\wsgi.cpython-39.pyc
C:\Users\dell\Documents\codes\VinajiFinal\vinaji_project\vinaji_project\__pycache__\__init__.cpython-39.pyc


SQL:
PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "django_migrations" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app" varchar(255) NOT NULL, "name" varchar(255) NOT NULL, "applied" datetime NOT NULL);
INSERT INTO django_migrations VALUES(1,'contenttypes','0001_initial','2025-10-03 05:31:00.731183');
INSERT INTO django_migrations VALUES(2,'contenttypes','0002_remove_content_type_name','2025-10-03 05:31:00.930550');
INSERT INTO django_migrations VALUES(3,'auth','0001_initial','2025-10-03 05:31:01.361059');
INSERT INTO django_migrations VALUES(4,'auth','0002_alter_permission_name_max_length','2025-10-03 05:31:01.543707');
INSERT INTO django_migrations VALUES(5,'auth','0003_alter_user_email_max_length','2025-10-03 05:31:01.767657');
INSERT INTO django_migrations VALUES(6,'auth','0004_alter_user_username_opts','2025-10-03 05:31:01.964263');
INSERT INTO django_migrations VALUES(7,'auth','0005_alter_user_last_login_null','2025-10-03 05:31:02.160234');
INSERT INTO django_migrations VALUES(8,'auth','0006_require_contenttypes_0002','2025-10-03 05:31:03.833326');
INSERT INTO django_migrations VALUES(9,'auth','0007_alter_validators_add_error_messages','2025-10-03 05:31:04.016206');
INSERT INTO django_migrations VALUES(10,'auth','0008_alter_user_username_max_length','2025-10-03 05:31:04.561688');
INSERT INTO django_migrations VALUES(11,'auth','0009_alter_user_last_name_max_length','2025-10-03 05:31:05.298262');
INSERT INTO django_migrations VALUES(12,'auth','0010_alter_group_name_max_length','2025-10-03 05:31:06.369023');
INSERT INTO django_migrations VALUES(13,'auth','0011_update_proxy_permissions','2025-10-03 05:31:06.752990');
INSERT INTO django_migrations VALUES(14,'auth','0012_alter_user_first_name_max_length','2025-10-03 05:31:06.972632');
INSERT INTO django_migrations VALUES(15,'accounts','0001_initial','2025-10-03 05:31:07.544910');
INSERT INTO django_migrations VALUES(16,'admin','0001_initial','2025-10-03 05:31:08.274715');
INSERT INTO django_migrations VALUES(17,'admin','0002_logentry_remove_auto_add','2025-10-03 05:31:08.417639');
INSERT INTO django_migrations VALUES(18,'admin','0003_logentry_add_action_flag_choices','2025-10-03 05:31:08.794485');
INSERT INTO django_migrations VALUES(19,'payments','0001_initial','2025-10-03 05:31:09.717463');
INSERT INTO django_migrations VALUES(20,'affiliates','0001_initial','2025-10-03 05:31:12.761743');
INSERT INTO django_migrations VALUES(21,'blog','0001_initial','2025-10-03 05:31:13.896773');
INSERT INTO django_migrations VALUES(22,'courses','0001_initial','2025-10-03 05:31:15.306633');
INSERT INTO django_migrations VALUES(23,'dashboard','0001_initial','2025-10-03 05:31:16.412809');
INSERT INTO django_migrations VALUES(24,'jobs','0001_initial','2025-10-03 05:31:17.116046');
INSERT INTO django_migrations VALUES(25,'mentorship','0001_initial','2025-10-03 05:31:17.788562');
INSERT INTO django_migrations VALUES(26,'pricing','0001_initial','2025-10-03 05:31:18.492568');
INSERT INTO django_migrations VALUES(27,'products','0001_initial','2025-10-03 05:31:19.167306');
INSERT INTO django_migrations VALUES(28,'sessions','0001_initial','2025-10-03 05:31:19.560953');
INSERT INTO django_migrations VALUES(29,'site_core','0001_initial','2025-10-03 05:31:19.810915');
INSERT INTO django_migrations VALUES(30,'transactions','0001_initial','2025-10-03 05:31:20.328235');
INSERT INTO django_migrations VALUES(31,'accounts','0002_alter_userprofile_referred_by','2025-10-03 06:17:32.883597');
INSERT INTO django_migrations VALUES(32,'jobs','0002_job_company_logo','2025-10-03 21:49:35.005511');
INSERT INTO django_migrations VALUES(33,'products','0002_productimage_promocode_product_features_product_tags_and_more','2025-10-03 21:49:36.487927');
INSERT INTO django_migrations VALUES(34,'site_core','0002_adminnotification_sitesetting_deposit_mode_and_more','2025-10-03 21:49:37.159636');
INSERT INTO django_migrations VALUES(35,'courses','0002_alter_course_category','2025-10-04 00:31:07.415190');
INSERT INTO django_migrations VALUES(36,'jobs','0003_alter_job_category','2025-10-04 00:31:07.873300');
INSERT INTO django_migrations VALUES(37,'products','0003_alter_product_category','2025-10-04 00:31:08.196436');
CREATE TABLE IF NOT EXISTS "django_content_type" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "app_label" varchar(100) NOT NULL, "model" varchar(100) NOT NULL);
INSERT INTO django_content_type VALUES(1,'admin','logentry');
INSERT INTO django_content_type VALUES(2,'auth','permission');
INSERT INTO django_content_type VALUES(3,'auth','group');
INSERT INTO django_content_type VALUES(4,'auth','user');
INSERT INTO django_content_type VALUES(5,'contenttypes','contenttype');
INSERT INTO django_content_type VALUES(6,'sessions','session');
INSERT INTO django_content_type VALUES(7,'accounts','user');
INSERT INTO django_content_type VALUES(8,'accounts','userprofile');
INSERT INTO django_content_type VALUES(9,'accounts','cryptowallet');
INSERT INTO django_content_type VALUES(10,'accounts','bankaccount');
INSERT INTO django_content_type VALUES(11,'dashboard','jobcategory');
INSERT INTO django_content_type VALUES(12,'dashboard','job');
INSERT INTO django_content_type VALUES(13,'jobs','jobcategory');
INSERT INTO django_content_type VALUES(14,'jobs','job');
INSERT INTO django_content_type VALUES(15,'courses','coursecategory');
INSERT INTO django_content_type VALUES(16,'courses','promocode');
INSERT INTO django_content_type VALUES(17,'courses','course');
INSERT INTO django_content_type VALUES(18,'courses','enrollment');
INSERT INTO django_content_type VALUES(19,'products','product');
INSERT INTO django_content_type VALUES(20,'products','productcategory');
INSERT INTO django_content_type VALUES(21,'products','productsale');
INSERT INTO django_content_type VALUES(22,'affiliates','referral');
INSERT INTO django_content_type VALUES(23,'affiliates','affiliatesale');
INSERT INTO django_content_type VALUES(24,'mentorship','mentorshipoffer');
INSERT INTO django_content_type VALUES(25,'mentorship','mentorshipapplication');
INSERT INTO django_content_type VALUES(26,'payments','paymentmethod');
INSERT INTO django_content_type VALUES(27,'payments','transaction');
INSERT INTO django_content_type VALUES(28,'pricing','subscriptionplan');
INSERT INTO django_content_type VALUES(29,'pricing','subscriptionpurchase');
INSERT INTO django_content_type VALUES(30,'transactions','notification');
INSERT INTO django_content_type VALUES(31,'blog','category');
INSERT INTO django_content_type VALUES(32,'blog','tag');
INSERT INTO django_content_type VALUES(33,'blog','blogpost');
INSERT INTO django_content_type VALUES(34,'blog','blogcomment');
INSERT INTO django_content_type VALUES(35,'blog','savedarticle');
INSERT INTO django_content_type VALUES(36,'site_core','sitesetting');
INSERT INTO django_content_type VALUES(37,'products','productimage');
INSERT INTO django_content_type VALUES(38,'products','promocode');
INSERT INTO django_content_type VALUES(39,'site_core','adminnotification');
INSERT INTO django_content_type VALUES(40,'site_core','category');
CREATE TABLE IF NOT EXISTS "auth_group_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_user_groups" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_user_user_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "auth_permission" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "content_type_id" integer NOT NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "codename" varchar(100) NOT NULL, "name" varchar(255) NOT NULL);
INSERT INTO auth_permission VALUES(1,1,'add_logentry','Can add log entry');
INSERT INTO auth_permission VALUES(2,1,'change_logentry','Can change log entry');
INSERT INTO auth_permission VALUES(3,1,'delete_logentry','Can delete log entry');
INSERT INTO auth_permission VALUES(4,1,'view_logentry','Can view log entry');
INSERT INTO auth_permission VALUES(5,2,'add_permission','Can add permission');
INSERT INTO auth_permission VALUES(6,2,'change_permission','Can change permission');
INSERT INTO auth_permission VALUES(7,2,'delete_permission','Can delete permission');
INSERT INTO auth_permission VALUES(8,2,'view_permission','Can view permission');
INSERT INTO auth_permission VALUES(9,3,'add_group','Can add group');
INSERT INTO auth_permission VALUES(10,3,'change_group','Can change group');
INSERT INTO auth_permission VALUES(11,3,'delete_group','Can delete group');
INSERT INTO auth_permission VALUES(12,3,'view_group','Can view group');
INSERT INTO auth_permission VALUES(13,4,'add_user','Can add user');
INSERT INTO auth_permission VALUES(14,4,'change_user','Can change user');
INSERT INTO auth_permission VALUES(15,4,'delete_user','Can delete user');
INSERT INTO auth_permission VALUES(16,4,'view_user','Can view user');
INSERT INTO auth_permission VALUES(17,5,'add_contenttype','Can add content type');
INSERT INTO auth_permission VALUES(18,5,'change_contenttype','Can change content type');
INSERT INTO auth_permission VALUES(19,5,'delete_contenttype','Can delete content type');
INSERT INTO auth_permission VALUES(20,5,'view_contenttype','Can view content type');
INSERT INTO auth_permission VALUES(21,6,'add_session','Can add session');
INSERT INTO auth_permission VALUES(22,6,'change_session','Can change session');
INSERT INTO auth_permission VALUES(23,6,'delete_session','Can delete session');
INSERT INTO auth_permission VALUES(24,6,'view_session','Can view session');
INSERT INTO auth_permission VALUES(25,7,'add_user','Can add user');
INSERT INTO auth_permission VALUES(26,7,'change_user','Can change user');
INSERT INTO auth_permission VALUES(27,7,'delete_user','Can delete user');
INSERT INTO auth_permission VALUES(28,7,'view_user','Can view user');
INSERT INTO auth_permission VALUES(29,8,'add_userprofile','Can add user profile');
INSERT INTO auth_permission VALUES(30,8,'change_userprofile','Can change user profile');
INSERT INTO auth_permission VALUES(31,8,'delete_userprofile','Can delete user profile');
INSERT INTO auth_permission VALUES(32,8,'view_userprofile','Can view user profile');
INSERT INTO auth_permission VALUES(33,9,'add_cryptowallet','Can add crypto wallet');
INSERT INTO auth_permission VALUES(34,9,'change_cryptowallet','Can change crypto wallet');
INSERT INTO auth_permission VALUES(35,9,'delete_cryptowallet','Can delete crypto wallet');
INSERT INTO auth_permission VALUES(36,9,'view_cryptowallet','Can view crypto wallet');
INSERT INTO auth_permission VALUES(37,10,'add_bankaccount','Can add bank account');
INSERT INTO auth_permission VALUES(38,10,'change_bankaccount','Can change bank account');
INSERT INTO auth_permission VALUES(39,10,'delete_bankaccount','Can delete bank account');
INSERT INTO auth_permission VALUES(40,10,'view_bankaccount','Can view bank account');
INSERT INTO auth_permission VALUES(41,11,'add_jobcategory','Can add job category');
INSERT INTO auth_permission VALUES(42,11,'change_jobcategory','Can change job category');
INSERT INTO auth_permission VALUES(43,11,'delete_jobcategory','Can delete job category');
INSERT INTO auth_permission VALUES(44,11,'view_jobcategory','Can view job category');
INSERT INTO auth_permission VALUES(45,12,'add_job','Can add job');
INSERT INTO auth_permission VALUES(46,12,'change_job','Can change job');
INSERT INTO auth_permission VALUES(47,12,'delete_job','Can delete job');
INSERT INTO auth_permission VALUES(48,12,'view_job','Can view job');
INSERT INTO auth_permission VALUES(49,13,'add_jobcategory','Can add job category');
INSERT INTO auth_permission VALUES(50,13,'change_jobcategory','Can change job category');
INSERT INTO auth_permission VALUES(51,13,'delete_jobcategory','Can delete job category');
INSERT INTO auth_permission VALUES(52,13,'view_jobcategory','Can view job category');
INSERT INTO auth_permission VALUES(53,14,'add_job','Can add job');
INSERT INTO auth_permission VALUES(54,14,'change_job','Can change job');
INSERT INTO auth_permission VALUES(55,14,'delete_job','Can delete job');
INSERT INTO auth_permission VALUES(56,14,'view_job','Can view job');
INSERT INTO auth_permission VALUES(57,15,'add_coursecategory','Can add course category');
INSERT INTO auth_permission VALUES(58,15,'change_coursecategory','Can change course category');
INSERT INTO auth_permission VALUES(59,15,'delete_coursecategory','Can delete course category');
INSERT INTO auth_permission VALUES(60,15,'view_coursecategory','Can view course category');
INSERT INTO auth_permission VALUES(61,16,'add_promocode','Can add promo code');
INSERT INTO auth_permission VALUES(62,16,'change_promocode','Can change promo code');
INSERT INTO auth_permission VALUES(63,16,'delete_promocode','Can delete promo code');
INSERT INTO auth_permission VALUES(64,16,'view_promocode','Can view promo code');
INSERT INTO auth_permission VALUES(65,17,'add_course','Can add course');
INSERT INTO auth_permission VALUES(66,17,'change_course','Can change course');
INSERT INTO auth_permission VALUES(67,17,'delete_course','Can delete course');
INSERT INTO auth_permission VALUES(68,17,'view_course','Can view course');
INSERT INTO auth_permission VALUES(69,18,'add_enrollment','Can add enrollment');
INSERT INTO auth_permission VALUES(70,18,'change_enrollment','Can change enrollment');
INSERT INTO auth_permission VALUES(71,18,'delete_enrollment','Can delete enrollment');
INSERT INTO auth_permission VALUES(72,18,'view_enrollment','Can view enrollment');
INSERT INTO auth_permission VALUES(73,19,'add_product','Can add product');
INSERT INTO auth_permission VALUES(74,19,'change_product','Can change product');
INSERT INTO auth_permission VALUES(75,19,'delete_product','Can delete product');
INSERT INTO auth_permission VALUES(76,19,'view_product','Can view product');
INSERT INTO auth_permission VALUES(77,20,'add_productcategory','Can add product category');
INSERT INTO auth_permission VALUES(78,20,'change_productcategory','Can change product category');
INSERT INTO auth_permission VALUES(79,20,'delete_productcategory','Can delete product category');
INSERT INTO auth_permission VALUES(80,20,'view_productcategory','Can view product category');
INSERT INTO auth_permission VALUES(81,21,'add_productsale','Can add product sale');
INSERT INTO auth_permission VALUES(82,21,'change_productsale','Can change product sale');
INSERT INTO auth_permission VALUES(83,21,'delete_productsale','Can delete product sale');
INSERT INTO auth_permission VALUES(84,21,'view_productsale','Can view product sale');
INSERT INTO auth_permission VALUES(85,22,'add_referral','Can add referral');
INSERT INTO auth_permission VALUES(86,22,'change_referral','Can change referral');
INSERT INTO auth_permission VALUES(87,22,'delete_referral','Can delete referral');
INSERT INTO auth_permission VALUES(88,22,'view_referral','Can view referral');
INSERT INTO auth_permission VALUES(89,23,'add_affiliatesale','Can add affiliate sale');
INSERT INTO auth_permission VALUES(90,23,'change_affiliatesale','Can change affiliate sale');
INSERT INTO auth_permission VALUES(91,23,'delete_affiliatesale','Can delete affiliate sale');
INSERT INTO auth_permission VALUES(92,23,'view_affiliatesale','Can view affiliate sale');
INSERT INTO auth_permission VALUES(93,24,'add_mentorshipoffer','Can add mentorship offer');
INSERT INTO auth_permission VALUES(94,24,'change_mentorshipoffer','Can change mentorship offer');
INSERT INTO auth_permission VALUES(95,24,'delete_mentorshipoffer','Can delete mentorship offer');
INSERT INTO auth_permission VALUES(96,24,'view_mentorshipoffer','Can view mentorship offer');
INSERT INTO auth_permission VALUES(97,25,'add_mentorshipapplication','Can add mentorship application');
INSERT INTO auth_permission VALUES(98,25,'change_mentorshipapplication','Can change mentorship application');
INSERT INTO auth_permission VALUES(99,25,'delete_mentorshipapplication','Can delete mentorship application');
INSERT INTO auth_permission VALUES(100,25,'view_mentorshipapplication','Can view mentorship application');
INSERT INTO auth_permission VALUES(101,26,'add_paymentmethod','Can add payment method');
INSERT INTO auth_permission VALUES(102,26,'change_paymentmethod','Can change payment method');
INSERT INTO auth_permission VALUES(103,26,'delete_paymentmethod','Can delete payment method');
INSERT INTO auth_permission VALUES(104,26,'view_paymentmethod','Can view payment method');
INSERT INTO auth_permission VALUES(105,27,'add_transaction','Can add transaction');
INSERT INTO auth_permission VALUES(106,27,'change_transaction','Can change transaction');
INSERT INTO auth_permission VALUES(107,27,'delete_transaction','Can delete transaction');
INSERT INTO auth_permission VALUES(108,27,'view_transaction','Can view transaction');
INSERT INTO auth_permission VALUES(109,28,'add_subscriptionplan','Can add subscription plan');
INSERT INTO auth_permission VALUES(110,28,'change_subscriptionplan','Can change subscription plan');
INSERT INTO auth_permission VALUES(111,28,'delete_subscriptionplan','Can delete subscription plan');
INSERT INTO auth_permission VALUES(112,28,'view_subscriptionplan','Can view subscription plan');
INSERT INTO auth_permission VALUES(113,29,'add_subscriptionpurchase','Can add subscription purchase');
INSERT INTO auth_permission VALUES(114,29,'change_subscriptionpurchase','Can change subscription purchase');
INSERT INTO auth_permission VALUES(115,29,'delete_subscriptionpurchase','Can delete subscription purchase');
INSERT INTO auth_permission VALUES(116,29,'view_subscriptionpurchase','Can view subscription purchase');
INSERT INTO auth_permission VALUES(117,30,'add_notification','Can add notification');
INSERT INTO auth_permission VALUES(118,30,'change_notification','Can change notification');
INSERT INTO auth_permission VALUES(119,30,'delete_notification','Can delete notification');
INSERT INTO auth_permission VALUES(120,30,'view_notification','Can view notification');
INSERT INTO auth_permission VALUES(121,31,'add_category','Can add category');
INSERT INTO auth_permission VALUES(122,31,'change_category','Can change category');
INSERT INTO auth_permission VALUES(123,31,'delete_category','Can delete category');
INSERT INTO auth_permission VALUES(124,31,'view_category','Can view category');
INSERT INTO auth_permission VALUES(125,32,'add_tag','Can add tag');
INSERT INTO auth_permission VALUES(126,32,'change_tag','Can change tag');
INSERT INTO auth_permission VALUES(127,32,'delete_tag','Can delete tag');
INSERT INTO auth_permission VALUES(128,32,'view_tag','Can view tag');
INSERT INTO auth_permission VALUES(129,33,'add_blogpost','Can add blog post');
INSERT INTO auth_permission VALUES(130,33,'change_blogpost','Can change blog post');
INSERT INTO auth_permission VALUES(131,33,'delete_blogpost','Can delete blog post');
INSERT INTO auth_permission VALUES(132,33,'view_blogpost','Can view blog post');
INSERT INTO auth_permission VALUES(133,34,'add_blogcomment','Can add blog comment');
INSERT INTO auth_permission VALUES(134,34,'change_blogcomment','Can change blog comment');
INSERT INTO auth_permission VALUES(135,34,'delete_blogcomment','Can delete blog comment');
INSERT INTO auth_permission VALUES(136,34,'view_blogcomment','Can view blog comment');
INSERT INTO auth_permission VALUES(137,35,'add_savedarticle','Can add saved article');
INSERT INTO auth_permission VALUES(138,35,'change_savedarticle','Can change saved article');
INSERT INTO auth_permission VALUES(139,35,'delete_savedarticle','Can delete saved article');
INSERT INTO auth_permission VALUES(140,35,'view_savedarticle','Can view saved article');
INSERT INTO auth_permission VALUES(141,36,'add_sitesetting','Can add Site Setting');
INSERT INTO auth_permission VALUES(142,36,'change_sitesetting','Can change Site Setting');
INSERT INTO auth_permission VALUES(143,36,'delete_sitesetting','Can delete Site Setting');
INSERT INTO auth_permission VALUES(144,36,'view_sitesetting','Can view Site Setting');
INSERT INTO auth_permission VALUES(145,37,'add_productimage','Can add product image');
INSERT INTO auth_permission VALUES(146,37,'change_productimage','Can change product image');
INSERT INTO auth_permission VALUES(147,37,'delete_productimage','Can delete product image');
INSERT INTO auth_permission VALUES(148,37,'view_productimage','Can view product image');
INSERT INTO auth_permission VALUES(149,38,'add_promocode','Can add promo code');
INSERT INTO auth_permission VALUES(150,38,'change_promocode','Can change promo code');
INSERT INTO auth_permission VALUES(151,38,'delete_promocode','Can delete promo code');
INSERT INTO auth_permission VALUES(152,38,'view_promocode','Can view promo code');
INSERT INTO auth_permission VALUES(153,39,'add_adminnotification','Can add admin notification');
INSERT INTO auth_permission VALUES(154,39,'change_adminnotification','Can change admin notification');
INSERT INTO auth_permission VALUES(155,39,'delete_adminnotification','Can delete admin notification');
INSERT INTO auth_permission VALUES(156,39,'view_adminnotification','Can view admin notification');
INSERT INTO auth_permission VALUES(157,40,'add_category','Can add category');
INSERT INTO auth_permission VALUES(158,40,'change_category','Can change category');
INSERT INTO auth_permission VALUES(159,40,'delete_category','Can delete category');
INSERT INTO auth_permission VALUES(160,40,'view_category','Can view category');
CREATE TABLE IF NOT EXISTS "auth_group" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(150) NOT NULL UNIQUE);
CREATE TABLE IF NOT EXISTS "auth_user" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "password" varchar(128) NOT NULL, "last_login" datetime NULL, "is_superuser" bool NOT NULL, "username" varchar(150) NOT NULL UNIQUE, "last_name" varchar(150) NOT NULL, "email" varchar(254) NOT NULL, "is_staff" bool NOT NULL, "is_active" bool NOT NULL, "date_joined" datetime NOT NULL, "first_name" varchar(150) NOT NULL);
INSERT INTO auth_user VALUES(1,'pbkdf2_sha256$600000$xdOGrl02yJpPalQz9Md3Mc$qErfM89m7yftY/oIqKs7SKq0K+NareKiwV6GElLU8+g=','2025-10-03 06:07:05.874727',1,'dydx','','dydx001@gmail.com',1,1,'2025-10-03 05:48:27.770584','');
CREATE TABLE IF NOT EXISTS "accounts_user" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "password" varchar(128) NOT NULL, "last_login" datetime NULL, "is_superuser" bool NOT NULL, "username" varchar(150) NOT NULL UNIQUE, "first_name" varchar(150) NOT NULL, "last_name" varchar(150) NOT NULL, "email" varchar(254) NOT NULL, "is_staff" bool NOT NULL, "is_active" bool NOT NULL, "date_joined" datetime NOT NULL, "subscription_level" varchar(20) NOT NULL, "referral_code" varchar(20) NOT NULL UNIQUE, "is_verified" bool NOT NULL, "date_updated" datetime NOT NULL);
INSERT INTO accounts_user VALUES(1,'pbkdf2_sha256$600000$ePLdyjwKvUPMMfp5p3cuMV$apu4KRGcvIV9vhe2XtPwDkXKqlEsn4cWk/5LYdNYFl8=','2025-10-03 18:16:58.317299',1,'info','','','info@gmail.com',1,1,'2025-10-03 06:19:21.715482','starter','WMU2OYJL',0,'2025-10-03 06:19:22.953238');
INSERT INTO accounts_user VALUES(2,'pbkdf2_sha256$600000$M3FNESb1JnfFWxdxIi3Pse$yoGpf2EFK5clFcAq6M+DuGXlh5MCx9i3ZUkmCCsoStA=','2025-10-03 23:46:05.043766',0,'dydx','Yusuf','Ayomide','Yusufvabdullah001@gmail.com',0,1,'2025-10-03 18:44:36.034890','starter','5UJIC62D',0,'2025-10-03 18:44:37.400345');
INSERT INTO accounts_user VALUES(3,'pbkdf2_sha256$600000$7VB4YjmSkIf5tKW28x871j$jExn0bDysl7ANhWJ2pqnjqIvRkP+hoOIXhu51H2fht4=','2025-10-03 23:11:55.258614',1,'infograb','','','infograb@gmail.com',1,0,'2025-10-03 18:50:22.885170','starter','RHG6LUWF',0,'2025-10-03 23:21:35.384873');
INSERT INTO accounts_user VALUES(4,'pbkdf2_sha256$600000$NBkYdtziT3gvH68Sgtm5KI$muxw73XvV2vFGF5AtmZ47CxN3UX8Vps0USls3WuvPuU=','2025-10-03 22:20:05.412352',0,'josh11','Joseph','Henry','josh11pol@gm.com',0,1,'2025-10-03 21:51:19.198386','starter','SGGBYWE9',0,'2025-10-03 21:51:20.664960');
INSERT INTO accounts_user VALUES(5,'pbkdf2_sha256$600000$Ojj3tMJ9THBnSI6yUEUiDu$t8JXLiLQaHc7/G/S/Nd6BiOEe/zbrUjgzYmwlSjmXbc=',NULL,1,'dydx2','','','dydx@gmail.com',1,1,'2025-10-03 22:21:31.657357','starter','OT95CIKP',0,'2025-10-03 22:21:32.815828');
INSERT INTO accounts_user VALUES(6,'pbkdf2_sha256$600000$rWt4f6bZCzcWIV9JUgrpfP$bKSjWZIIZRSwU12BcV2m5wfekktkNAM8FhD9N7Nu7B0=','2025-10-04 01:32:34.729861',1,'dydx1','','','dydx1@gmail.com',1,1,'2025-10-03 23:45:37.696736','starter','PYEIBPAT',0,'2025-10-03 23:45:38.772465');
INSERT INTO accounts_user VALUES(7,'pbkdf2_sha256$600000$9bPMXIyQ7gAmaR4ZWTGlua$qxCgEXy3DdkccQQpxEEE62sqyqmIWDW7Dig9V2df9NY=','2025-10-04 19:45:35.573528',0,'ysf','Yusuf','Ayomide','Yusufvabdullah001@gmail.com',0,1,'2025-10-04 19:45:31.771825','starter','JHUSPYW',0,'2025-10-04 19:45:33.264219');
CREATE TABLE IF NOT EXISTS "accounts_user_groups" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" bigint NOT NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED, "group_id" integer NOT NULL REFERENCES "auth_group" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "accounts_user_user_permissions" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "user_id" bigint NOT NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED, "permission_id" integer NOT NULL REFERENCES "auth_permission" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "accounts_userprofile" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "bio" text NOT NULL, "profile_picture" varchar(100) NULL, "country" varchar(100) NOT NULL, "phone_number" varchar(20) NOT NULL, "date_joined" datetime NOT NULL, "referred_by_id" bigint NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" bigint NOT NULL UNIQUE REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO accounts_userprofile VALUES(1,'','','','','2025-10-03 06:19:23.148064',NULL,1);
INSERT INTO accounts_userprofile VALUES(2,'Wonderfully Made Man','profile_pics/InShot_20241129_131536365222.jpg','Nigeria','09055449242','2025-10-03 18:44:37.648466',NULL,2);
INSERT INTO accounts_userprofile VALUES(3,'A gentle man to the core','profile_pics/batch_218964331_356737129356709_1180732076552714248_n_1.jpg','Nigeria','09041759174','2025-10-03 18:50:24.118278',NULL,3);
INSERT INTO accounts_userprofile VALUES(4,'A small boy with big God.','profile_pics/InShot_20241129_131536365.jpg','United States','+11998988989','2025-10-03 21:51:20.763498',NULL,4);
INSERT INTO accounts_userprofile VALUES(5,'','','','','2025-10-03 22:21:32.998778',NULL,5);
INSERT INTO accounts_userprofile VALUES(6,'','','','','2025-10-03 23:45:38.975809',NULL,6);
INSERT INTO accounts_userprofile VALUES(7,'','','','','2025-10-04 19:45:33.364498',NULL,7);
CREATE TABLE IF NOT EXISTS "accounts_cryptowallet" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "crypto_type" varchar(10) NOT NULL, "wallet_address" varchar(255) NOT NULL, "network" varchar(50) NOT NULL, "is_primary" bool NOT NULL, "created_at" datetime NOT NULL, "user_id" bigint NOT NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO accounts_cryptowallet VALUES(1,'usdt','3434q5u54g6u3h5yhy','TRC20',1,'2025-10-03 23:49:47.282831',2);
CREATE TABLE IF NOT EXISTS "accounts_bankaccount" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "bank_name" varchar(100) NOT NULL, "account_number" varchar(20) NOT NULL, "account_name" varchar(100) NOT NULL, "account_type" varchar(10) NOT NULL, "is_primary" bool NOT NULL, "is_verified" bool NOT NULL, "created_at" datetime NOT NULL, "user_id" bigint NOT NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO accounts_bankaccount VALUES(1,'First Bank','8033220011','Joseph Henry','savings',1,0,'2025-10-03 23:47:12.936435',2);
INSERT INTO accounts_bankaccount VALUES(2,'First Bank','8033220011','Joseph Henry','current',1,0,'2025-10-04 19:41:35.849442',6);
CREATE TABLE IF NOT EXISTS "django_admin_log" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "object_id" text NULL, "object_repr" varchar(200) NOT NULL, "action_flag" smallint unsigned NOT NULL CHECK ("action_flag" >= 0), "change_message" text NOT NULL, "content_type_id" integer NULL REFERENCES "django_content_type" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "action_time" datetime NOT NULL);
CREATE TABLE IF NOT EXISTS "payments_paymentmethod" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(50) NOT NULL, "is_active" bool NOT NULL, "config" text NOT NULL CHECK ((JSON_VALID("config") OR "config" IS NULL)));
CREATE TABLE IF NOT EXISTS "payments_transaction" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "transaction_type" varchar(20) NOT NULL, "amount" decimal NOT NULL, "currency" varchar(3) NOT NULL, "status" varchar(20) NOT NULL, "reference" varchar(100) NOT NULL UNIQUE, "description" text NOT NULL, "metadata" text NOT NULL CHECK ((JSON_VALID("metadata") OR "metadata" IS NULL)), "rejection_reason" text NOT NULL, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "completed_at" datetime NULL, "payment_method_id" bigint NULL REFERENCES "payments_paymentmethod" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "affiliates_referral" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "joined_at" datetime NOT NULL, "is_active" bool NOT NULL, "referred_user_id" integer NOT NULL UNIQUE REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "referrer_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "affiliates_affiliatesale" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "commission_amount" decimal NOT NULL, "commission_rate" decimal NOT NULL, "status" varchar(20) NOT NULL, "created_at" datetime NOT NULL, "paid_at" datetime NULL, "referral_id" bigint NOT NULL REFERENCES "affiliates_referral" ("id") DEFERRABLE INITIALLY DEFERRED, "sale_id" bigint NOT NULL REFERENCES "payments_transaction" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "blog_category" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(100) NOT NULL UNIQUE, "description" text NOT NULL, "is_active" bool NOT NULL, "created_at" datetime NOT NULL);
CREATE TABLE IF NOT EXISTS "blog_tag" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(50) NOT NULL UNIQUE, "created_at" datetime NOT NULL);
CREATE TABLE IF NOT EXISTS "blog_blogpost" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "slug" varchar(200) NOT NULL UNIQUE, "content" text NOT NULL, "excerpt" text NOT NULL, "featured_image" varchar(100) NULL, "status" varchar(20) NOT NULL, "rejection_reason" text NOT NULL, "is_featured" bool NOT NULL, "views_count" integer unsigned NOT NULL CHECK ("views_count" >= 0), "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "published_at" datetime NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "category_id" bigint NULL REFERENCES "blog_category" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "blog_blogpost_likes" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "blogpost_id" bigint NOT NULL REFERENCES "blog_blogpost" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "blog_blogpost_tags" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "blogpost_id" bigint NOT NULL REFERENCES "blog_blogpost" ("id") DEFERRABLE INITIALLY DEFERRED, "tag_id" bigint NOT NULL REFERENCES "blog_tag" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "blog_blogcomment" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "content" text NOT NULL, "is_approved" bool NOT NULL, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "author_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "post_id" bigint NOT NULL REFERENCES "blog_blogpost" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "blog_savedarticle" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "saved_at" datetime NOT NULL, "post_id" bigint NOT NULL REFERENCES "blog_blogpost" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "courses_coursecategory" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(100) NOT NULL UNIQUE, "description" text NOT NULL, "is_active" bool NOT NULL);
CREATE TABLE IF NOT EXISTS "courses_promocode" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "code" varchar(50) NOT NULL UNIQUE, "discount_percent" decimal NOT NULL, "discount_amount" decimal NOT NULL, "max_uses" integer unsigned NOT NULL CHECK ("max_uses" >= 0), "used_count" integer unsigned NOT NULL CHECK ("used_count" >= 0), "valid_until" datetime NOT NULL, "is_active" bool NOT NULL);
CREATE TABLE IF NOT EXISTS "courses_enrollment" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "enrolled_at" datetime NOT NULL, "status" varchar(20) NOT NULL, "final_price" decimal NOT NULL, "course_id" bigint NOT NULL REFERENCES "courses_course" ("id") DEFERRABLE INITIALLY DEFERRED, "promo_code_used_id" bigint NULL REFERENCES "courses_promocode" ("id") DEFERRABLE INITIALLY DEFERRED, "student_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "dashboard_jobcategory" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(100) NOT NULL UNIQUE, "description" text NOT NULL, "is_active" bool NOT NULL);
CREATE TABLE IF NOT EXISTS "dashboard_job" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "description" text NOT NULL, "job_type" varchar(20) NOT NULL, "location" varchar(100) NOT NULL, "company_name" varchar(100) NOT NULL, "salary_min" decimal NOT NULL, "salary_max" decimal NOT NULL, "deadline" datetime NOT NULL, "spots_total" integer unsigned NOT NULL CHECK ("spots_total" >= 0), "spots_left" integer unsigned NOT NULL CHECK ("spots_left" >= 0), "level_requirement" varchar(20) NOT NULL, "price" decimal NOT NULL, "status" varchar(20) NOT NULL, "rejection_reason" text NOT NULL, "views_count" integer unsigned NOT NULL CHECK ("views_count" >= 0), "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "category_id" bigint NOT NULL REFERENCES "dashboard_jobcategory" ("id") DEFERRABLE INITIALLY DEFERRED, "posted_by_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "dashboard_job_favorites" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "job_id" bigint NOT NULL REFERENCES "dashboard_job" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "jobs_jobcategory" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(100) NOT NULL UNIQUE, "description" text NOT NULL, "is_active" bool NOT NULL);
CREATE TABLE IF NOT EXISTS "jobs_job_favorites" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "job_id" bigint NOT NULL REFERENCES "jobs_job" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "mentorship_mentorshipoffer" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "description" text NOT NULL, "expertise_area" varchar(100) NOT NULL, "price_per_hour" decimal NOT NULL, "subscription_requirement" varchar(20) NOT NULL, "max_students" integer unsigned NOT NULL CHECK ("max_students" >= 0), "current_students" integer unsigned NOT NULL CHECK ("current_students" >= 0), "is_available" bool NOT NULL, "status" varchar(20) NOT NULL, "rejection_reason" text NOT NULL, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "mentor_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "mentorship_mentorshipapplication" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "requested_duration" integer unsigned NOT NULL CHECK ("requested_duration" >= 0), "total_amount" decimal NOT NULL, "status" varchar(20) NOT NULL, "application_message" text NOT NULL, "rejection_reason" text NOT NULL, "applied_at" datetime NOT NULL, "approved_at" datetime NULL, "completed_at" datetime NULL, "applicant_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "mentorship_offer_id" bigint NOT NULL REFERENCES "mentorship_mentorshipoffer" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "pricing_subscriptionplan" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(20) NOT NULL UNIQUE, "description" text NOT NULL, "price" decimal NOT NULL, "duration_days" integer unsigned NOT NULL CHECK ("duration_days" >= 0), "features" text NOT NULL CHECK ((JSON_VALID("features") OR "features" IS NULL)), "is_active" bool NOT NULL, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL);
CREATE TABLE IF NOT EXISTS "pricing_subscriptionpurchase" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "amount_paid" decimal NOT NULL, "status" varchar(20) NOT NULL, "start_date" datetime NULL, "end_date" datetime NULL, "purchased_at" datetime NOT NULL, "plan_id" bigint NOT NULL REFERENCES "pricing_subscriptionplan" ("id") DEFERRABLE INITIALLY DEFERRED, "transaction_id" bigint NULL UNIQUE REFERENCES "payments_transaction" ("id") DEFERRABLE INITIALLY DEFERRED, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "products_productcategory" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(100) NOT NULL UNIQUE, "description" text NOT NULL, "is_active" bool NOT NULL);
CREATE TABLE IF NOT EXISTS "products_productsale" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "sale_price" decimal NOT NULL, "commission_amount" decimal NOT NULL, "admin_fee" decimal NOT NULL, "net_amount" decimal NOT NULL, "status" varchar(20) NOT NULL, "purchased_at" datetime NOT NULL, "license_key" varchar(100) NOT NULL, "download_count" integer unsigned NOT NULL CHECK ("download_count" >= 0), "buyer_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED, "product_id" bigint NOT NULL REFERENCES "products_product" ("id") DEFERRABLE INITIALLY DEFERRED, "seller_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "django_session" ("session_key" varchar(40) NOT NULL PRIMARY KEY, "session_data" text NOT NULL, "expire_date" datetime NOT NULL);
INSERT INTO django_session VALUES('hg201um0ldad53agn59snh878vy45upm','.eJxVjEEOwiAQRe_C2hA6AwVcuvcMZIBBqoYmpV0Z765NutDtf-_9lwi0rTVsnZcwZXEWIE6_W6T04LaDfKd2m2Wa27pMUe6KPGiX1znz83K4fweVev3WtoBFyHEAYh_Hoq0zDjI6jwmLLgrBcTTsxzQweUOaMYJXYBQnhUW8P9nYN6k:1v4kuy:3Anu-vYj3IOtceWFQyn5sjZ5oqfZadrSQ3o0I4Vqoi8','2025-10-17 18:54:12.366922');
INSERT INTO django_session VALUES('hr8kg7alaxu46mk075t6nonsx4jsu5t6','.eJxVjDkOwjAUBe_iGlmx8fJNSc8Zor-BA8iRslSIu0OkFNC-mXkv0-O61H6ddeoHMSfjzeF3I-SHtg3IHdtttDy2ZRrIbord6Wwvo-jzvLt_BxXn-q2RhPgKkWInEJgEAxQRKgSAHJOSQ-ePyaFmLTlH9gzJg6ZILrjOvD8gjziT:1v4lAz:_gZQvMHp6wjOOROlra_cNJzXb3JX3On9F7Gh4wbFeVs','2025-10-17 19:10:45.525360');
INSERT INTO django_session VALUES('gpn7zdqk9q80o36obrg5lli3u3velniz','.eJxVjMEOwiAQRP-FsyFlAakevfsNzcLuStVAUtqT8d-VpAc9zrw381ITbmuetsbLNJM6K1CH3y5ienDpgO5YblWnWtZljroreqdNXyvx87K7fwcZW_6ujRkpBQMnJgjBekAfKIrEhEF4ACveixcbXULnLAMcaRwIeg5irHp_AO9uOFY:1v4lzw:w8g3JT5Zr8YpWTvEZiElLexP9b-TrpIgbIP7N5oNcs8','2025-10-17 20:03:24.344623');
INSERT INTO django_session VALUES('t2mvic50tvyjqd5s0slrg0lv15d2jeu2','.eJxVjDsOwjAQBe_iGlnG8ZeSPmew1rtrHECOFCcV4u4QKQW0b2beSyTY1pq2zkuaSFzEIE6_WwZ8cNsB3aHdZolzW5cpy12RB-1ynImf18P9O6jQ67fmqB1ayx6QIWO0moeibTRnF9B5VsQh61KIoicT0KsCyhEqo5mjMuL9AQStOKc:1v4oFw:tFGqvCvw5yyCUuQjvkZcb8_yOU6nOHP8n8_w95xhXNw','2025-10-17 22:28:04.532286');
INSERT INTO django_session VALUES('7sba9hgnjw7kee6r2i13y8vapvovy92e','.eJxVjEEOwiAQRe_C2hBooQMu3XsGMgyDVA0kpV0Z765NutDtf-_9lwi4rSVsnZcwJ3EWgzj9bhHpwXUH6Y711iS1ui5zlLsiD9rltSV-Xg7376BgL98aCJ3TyVL2lMg7O9LklcvMAM7o0UYzKWOVjow2Kw-gB4tsQCEweBLvD-NTN44:1v4pCj:06YhOnABwqrL6vLlBGmj4kR5D7nCJY3wQOqG7lB_kcc','2025-10-17 23:28:49.711811');
INSERT INTO django_session VALUES('vfqwjzxso91pmn86c7ojuskleqtg8cqk','.eJxVjEsOAiEQBe_C2hBobFpcuvcMpPnJqIFkmFkZ766TzEK3r6reS3hel-rXkWc_JXEWVhx-t8DxkdsG0p3brcvY2zJPQW6K3OmQ157y87K7fweVR_3WYJXVFI0yDgNnZZG4sIv65CwxEzhbHCeIjEgqqQKOAkNBQA3aHMX7A8m0Nw8:1v4pgr:ZJA4JJ1uIGmlRq8JB-qaxdime6NBGH5j7N9EOiIlemg','2025-10-17 23:59:57.668134');
INSERT INTO django_session VALUES('o4blhjet0wn2svzj99r8hgbnhxno64q1','.eJxVjEEOwiAQRe_C2hBkWmBcuu8ZCAODVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIijDj9bhTig-sO0j3UW5Ox1XWZSe6KPGiXU0v8vB7u30EJvXzrAQGMjciUwblsz8GBoQjKEmjt1DiQMWw1ZMSAYxq0VsgM6JRlUEa8P8HfNqU:1v4qjf:D7CzQvd-yEd6DeKM3qZS19oH-8NjwGEVBDpIvF2D-6Q','2025-10-18 01:06:55.559193');
INSERT INTO django_session VALUES('7fun1849wqfej5r8388v8kks1n7ry2qp','.eJxVjEEOwiAQRe_C2hBkWmBcuu8ZCAODVA0kpV0Z765NutDtf-_9l_BhW4vfOi9-TuIijDj9bhTig-sO0j3UW5Ox1XWZSe6KPGiXU0v8vB7u30EJvXzrAQGMjciUwblsz8GBoQjKEmjt1DiQMWw1ZMSAYxq0VsgM6JRlUEa8P8HfNqU:1v4qjg:iNIpKLzypG_dAPQitTqB_t2EVuPIn0DJ4aDSlBDyFXw','2025-10-18 01:06:56.939198');
INSERT INTO django_session VALUES('nijp7yveyo61ruoj0s6nkffakhqb17hq','.eJxVjM0KwyAQhN_FcxGNP8Eee-8zyLq71rTFQExOoe9eAzm0h2FgvpnZRYRtLXFrvMSJxFV4cfnNEuCL6wHoCfUxS5zrukxJHhV50ibvM_H7dnb_Dgq00tcjp2zYW2INLucMQWWnterOaBMb77XrQgJrghsHtG4IZFElJG9YfL4E2jhf:1v4qrt:m5C_AGclCpzBEwd0g5sKZj6fhO6YLp7KP6U516uWV2o','2025-10-18 01:15:25.223668');
INSERT INTO django_session VALUES('hvqlm02e8aqptuy57f29dmlgz966vls9','.eJxVjEEOwiAQRe_C2hCggFOX7nsGMjCDVA0kpV0Z765NutDtf-_9lwi4rSVsnZcwk7gIL06_W8T04LoDumO9NZlaXZc5yl2RB-1yasTP6-H-HRTs5VtHTmdrNEbMNEIyzoxAoCzxAEAGybshgeacVWbt7eA5kldOabAMVov3BwACOAw:1v4r4z:nl9FtOOpQqC2UoAA4iEaxeYN8niUnQ4qFgFvSBnoD1A','2025-10-18 01:28:57.433860');
INSERT INTO django_session VALUES('xghikiu0so8f3vqac3gmqe68lja6181h','.eJxVjMEOwiAQRP-FsyGFsoV69N5vILsLSNVAUtqT8d9tkx70OPPezFt43NbstxYXPwdxFVZcfjtCfsZygPDAcq-Sa1mXmeShyJM2OdUQX7fT_TvI2PK-Hph6BcmBYq0RInSGcSSzJwoJgWJHiKh6E4AV2ESjI8sDqmQcgRafL_5VOKc:1v58CF:n-Q3TBUehPPyNgysAaEHp8V8dxEyG53i_zXpF_XVJdE','2025-10-18 19:45:35.871614');
CREATE TABLE IF NOT EXISTS "transactions_notification" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "notification_type" varchar(20) NOT NULL, "title" varchar(200) NOT NULL, "message" text NOT NULL, "is_read" bool NOT NULL, "related_object_id" integer unsigned NULL CHECK ("related_object_id" >= 0), "related_content_type" varchar(100) NOT NULL, "created_at" datetime NOT NULL, "user_id" integer NOT NULL REFERENCES "auth_user" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "products_productimage" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "image" varchar(100) NOT NULL, "caption" varchar(200) NOT NULL, "order" integer unsigned NOT NULL CHECK ("order" >= 0), "created_at" datetime NOT NULL);
CREATE TABLE IF NOT EXISTS "products_promocode" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "code" varchar(50) NOT NULL UNIQUE, "discount_percent" decimal NOT NULL, "discount_amount" decimal NOT NULL, "max_uses" integer unsigned NOT NULL CHECK ("max_uses" >= 0), "used_count" integer unsigned NOT NULL CHECK ("used_count" >= 0), "valid_until" datetime NOT NULL, "is_active" bool NOT NULL);
CREATE TABLE IF NOT EXISTS "products_product_gallery_images" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "product_id" bigint NOT NULL REFERENCES "products_product" ("id") DEFERRABLE INITIALLY DEFERRED, "productimage_id" bigint NOT NULL REFERENCES "products_productimage" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "site_core_adminnotification" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "message" text NOT NULL, "notification_type" varchar(20) NOT NULL, "action_url" varchar(200) NOT NULL, "action_text" varchar(50) NOT NULL, "is_active" bool NOT NULL, "show_popup" bool NOT NULL, "start_date" datetime NOT NULL, "end_date" datetime NOT NULL, "created_at" datetime NOT NULL);
INSERT INTO site_core_adminnotification VALUES(1,'Do not miss! Free N5000 to new users','This is to notify all our members that there will be a 50% discount in our withdrawal fee. A chance for everyone!','success','https://wa.me/2349041759174','Grab Now',1,1,'2025-10-22 00:52:00','2025-10-09 00:52:00','2025-10-03 23:56:05.956057');
CREATE TABLE IF NOT EXISTS "site_core_sitesetting" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "currency" varchar(3) NOT NULL, "currency_rate" decimal NOT NULL, "add_money_fee_pct" decimal NOT NULL, "transfer_fee_pct" decimal NOT NULL, "withdraw_fee_pct" decimal NOT NULL, "mentorship_fee_pct" decimal NOT NULL, "default_commission_pct" decimal NOT NULL, "pause_course_uploading" bool NOT NULL, "pause_gigs_uploading" bool NOT NULL, "pause_affiliates" bool NOT NULL, "site_title" varchar(200) NOT NULL, "site_description" text NOT NULL, "contact_email" varchar(254) NOT NULL, "legal_text" text NOT NULL, "default_subscription_prices" text NOT NULL CHECK ((JSON_VALID("default_subscription_prices") OR "default_subscription_prices" IS NULL)), "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "deposit_mode" varchar(10) NOT NULL, "manual_account_name" varchar(100) NOT NULL, "manual_account_number" varchar(20) NOT NULL, "manual_bank_name" varchar(100) NOT NULL, "monnify_api_key" varchar(255) NOT NULL, "monnify_secret_key" varchar(255) NOT NULL, "paystack_public_key" varchar(255) NOT NULL, "paystack_secret_key" varchar(255) NOT NULL, "withdrawal_mode" varchar(10) NOT NULL);
INSERT INTO site_core_sitesetting VALUES(1,'NGN',1,1.5,0.5,2,10,20,0,0,0,'Vinaji NG','','support@vinaji.com','','{}','2025-10-03 06:21:25.485725','2025-10-03 06:21:25.485725','manual','','','','','','','','manual');
CREATE TABLE IF NOT EXISTS "site_core_category" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "name" varchar(100) NOT NULL, "category_type" varchar(10) NOT NULL, "description" text NOT NULL, "is_active" bool NOT NULL, "created_at" datetime NOT NULL);
INSERT INTO site_core_category VALUES(1,'Financing','job','This is a category meant for finance industry.',1,'2025-10-04 00:05:59.938949');
INSERT INTO site_core_category VALUES(2,'SEMRUSH','course','good',1,'2025-10-04 00:32:07.423335');
INSERT INTO site_core_category VALUES(3,'Milks','product','A good product defined a good heart',1,'2025-10-04 01:33:20.558622');
CREATE TABLE IF NOT EXISTS "courses_course" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "description" text NOT NULL, "level" varchar(20) NOT NULL, "duration" integer unsigned NOT NULL CHECK ("duration" >= 0), "mode" varchar(20) NOT NULL, "start_date" datetime NOT NULL, "is_self_paced" bool NOT NULL, "price" decimal NOT NULL, "spots_total" integer unsigned NOT NULL CHECK ("spots_total" >= 0), "spots_left" integer unsigned NOT NULL CHECK ("spots_left" >= 0), "preview_video" varchar(200) NOT NULL, "thumbnail" varchar(100) NULL, "status" varchar(20) NOT NULL, "rejection_reason" text NOT NULL, "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "instructor_id" bigint NOT NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED, "category_id" bigint NOT NULL REFERENCES "site_core_category" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO courses_course VALUES(1,'433 wg','aV RG A','beginner',4,'online','2025-10-04 03:12:00',0,4444,4,1,'https://youtube.com/dydx_sample','','pending','','2025-10-04 01:12:13.794390','2025-10-04 01:12:13.794390',6,2);
INSERT INTO courses_course VALUES(2,'433 wg','aV RG A','beginner',4,'online','2025-10-04 03:12:00',0,4444,4,1,'https://youtube.com/dydx_sample','','pending','','2025-10-04 01:12:13.788394','2025-10-04 01:12:13.788394',6,2);
INSERT INTO courses_course VALUES(3,'Web Development Course For Beginners','This course takes you through the big progress.','beginner',24,'online','2025-10-04 20:03:00',0,400000,30,1,'https://youtube.com/dydx_sample','course_thumbnails/Screenshot_2024-10-22_143325.png','pending','','2025-10-04 19:04:32.394452','2025-10-04 19:04:32.394452',6,2);
CREATE TABLE IF NOT EXISTS "jobs_job" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "description" text NOT NULL, "job_type" varchar(20) NOT NULL, "location" varchar(100) NOT NULL, "company_name" varchar(100) NOT NULL, "salary_min" decimal NOT NULL, "salary_max" decimal NOT NULL, "deadline" datetime NOT NULL, "spots_total" integer unsigned NOT NULL CHECK ("spots_total" >= 0), "spots_left" integer unsigned NOT NULL CHECK ("spots_left" >= 0), "level_requirement" varchar(20) NOT NULL, "price" decimal NOT NULL, "status" varchar(20) NOT NULL, "rejection_reason" text NOT NULL, "views_count" integer unsigned NOT NULL CHECK ("views_count" >= 0), "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "posted_by_id" bigint NOT NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED, "company_logo" varchar(100) NULL, "category_id" bigint NOT NULL REFERENCES "site_core_category" ("id") DEFERRABLE INITIALLY DEFERRED);
CREATE TABLE IF NOT EXISTS "products_product" ("id" integer NOT NULL PRIMARY KEY AUTOINCREMENT, "title" varchar(200) NOT NULL, "description" text NOT NULL, "license_type" varchar(20) NOT NULL, "version" varchar(20) NOT NULL, "price" decimal NOT NULL, "product_file" varchar(100) NOT NULL, "sample_file" varchar(100) NULL, "thumbnail" varchar(100) NULL, "status" varchar(20) NOT NULL, "rejection_reason" text NOT NULL, "views_count" integer unsigned NOT NULL CHECK ("views_count" >= 0), "download_count" integer unsigned NOT NULL CHECK ("download_count" >= 0), "created_at" datetime NOT NULL, "updated_at" datetime NOT NULL, "seller_id" bigint NOT NULL REFERENCES "accounts_user" ("id") DEFERRABLE INITIALLY DEFERRED, "features" text NOT NULL, "tags" varchar(500) NOT NULL, "category_id" bigint NOT NULL REFERENCES "site_core_category" ("id") DEFERRABLE INITIALLY DEFERRED);
INSERT INTO products_product VALUES(1,'Premium Wordpress Theme','This theme is a fantastic theme for all users under my control','commercial','1.0',500,'product_files/Document11.pdf','sample_files/Google_AI_Studio_2025-07-18T16_43_07.382Z.png','product_thumbnails/InShot_20241129_131536365.jpg','pending','',0,0,'2025-10-04 19:13:47.223422','2025-10-04 19:13:47.223422',6,'','',3);
INSERT INTO sqlite_sequence VALUES('django_migrations',37);
INSERT INTO sqlite_sequence VALUES('django_content_type',40);
INSERT INTO sqlite_sequence VALUES('auth_permission',160);
INSERT INTO sqlite_sequence VALUES('auth_group',0);
INSERT INTO sqlite_sequence VALUES('auth_user',1);
INSERT INTO sqlite_sequence VALUES('django_admin_log',0);
INSERT INTO sqlite_sequence VALUES('accounts_user',7);
INSERT INTO sqlite_sequence VALUES('accounts_userprofile',7);
INSERT INTO sqlite_sequence VALUES('site_core_sitesetting',1);
INSERT INTO sqlite_sequence VALUES('accounts_bankaccount',2);
INSERT INTO sqlite_sequence VALUES('accounts_cryptowallet',1);
INSERT INTO sqlite_sequence VALUES('site_core_adminnotification',1);
INSERT INTO sqlite_sequence VALUES('site_core_category',3);
INSERT INTO sqlite_sequence VALUES('courses_course',3);
INSERT INTO sqlite_sequence VALUES('jobs_job',0);
INSERT INTO sqlite_sequence VALUES('products_product',1);
CREATE UNIQUE INDEX "django_content_type_app_label_model_76bd3d3b_uniq" ON "django_content_type" ("app_label", "model");
CREATE UNIQUE INDEX "auth_group_permissions_group_id_permission_id_0cd325b0_uniq" ON "auth_group_permissions" ("group_id", "permission_id");
CREATE INDEX "auth_group_permissions_group_id_b120cbf9" ON "auth_group_permissions" ("group_id");
CREATE INDEX "auth_group_permissions_permission_id_84c5c92e" ON "auth_group_permissions" ("permission_id");
CREATE UNIQUE INDEX "auth_user_groups_user_id_group_id_94350c0c_uniq" ON "auth_user_groups" ("user_id", "group_id");
CREATE INDEX "auth_user_groups_user_id_6a12ed8b" ON "auth_user_groups" ("user_id");
CREATE INDEX "auth_user_groups_group_id_97559544" ON "auth_user_groups" ("group_id");
CREATE UNIQUE INDEX "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq" ON "auth_user_user_permissions" ("user_id", "permission_id");
CREATE INDEX "auth_user_user_permissions_user_id_a95ead1b" ON "auth_user_user_permissions" ("user_id");
CREATE INDEX "auth_user_user_permissions_permission_id_1fbb5f2c" ON "auth_user_user_permissions" ("permission_id");
CREATE UNIQUE INDEX "auth_permission_content_type_id_codename_01ab375a_uniq" ON "auth_permission" ("content_type_id", "codename");
CREATE INDEX "auth_permission_content_type_id_2f476e4b" ON "auth_permission" ("content_type_id");
CREATE UNIQUE INDEX "accounts_user_groups_user_id_group_id_59c0b32f_uniq" ON "accounts_user_groups" ("user_id", "group_id");
CREATE INDEX "accounts_user_groups_user_id_52b62117" ON "accounts_user_groups" ("user_id");
CREATE INDEX "accounts_user_groups_group_id_bd11a704" ON "accounts_user_groups" ("group_id");
CREATE UNIQUE INDEX "accounts_user_user_permissions_user_id_permission_id_2ab516c2_uniq" ON "accounts_user_user_permissions" ("user_id", "permission_id");
CREATE INDEX "accounts_user_user_permissions_user_id_e4f0a161" ON "accounts_user_user_permissions" ("user_id");
CREATE INDEX "accounts_user_user_permissions_permission_id_113bb443" ON "accounts_user_user_permissions" ("permission_id");
CREATE INDEX "accounts_userprofile_referred_by_id_376f5a53" ON "accounts_userprofile" ("referred_by_id");
CREATE UNIQUE INDEX "accounts_cryptowallet_user_id_wallet_address_a76d7942_uniq" ON "accounts_cryptowallet" ("user_id", "wallet_address");
CREATE INDEX "accounts_cryptowallet_user_id_ead62220" ON "accounts_cryptowallet" ("user_id");
CREATE UNIQUE INDEX "accounts_bankaccount_user_id_account_number_a6ffeb4c_uniq" ON "accounts_bankaccount" ("user_id", "account_number");
CREATE INDEX "accounts_bankaccount_user_id_a50ca531" ON "accounts_bankaccount" ("user_id");
CREATE INDEX "django_admin_log_content_type_id_c4bce8eb" ON "django_admin_log" ("content_type_id");
CREATE INDEX "django_admin_log_user_id_c564eba6" ON "django_admin_log" ("user_id");
CREATE INDEX "payments_transaction_payment_method_id_f053ab03" ON "payments_transaction" ("payment_method_id");
CREATE INDEX "payments_transaction_user_id_ca456f41" ON "payments_transaction" ("user_id");
CREATE INDEX "payments_tr_user_id_b99a80_idx" ON "payments_transaction" ("user_id", "status");
CREATE INDEX "payments_tr_referen_530efe_idx" ON "payments_transaction" ("reference");
CREATE INDEX "payments_tr_created_02ae92_idx" ON "payments_transaction" ("created_at");
CREATE UNIQUE INDEX "affiliates_referral_referrer_id_referred_user_id_ec74b9f4_uniq" ON "affiliates_referral" ("referrer_id", "referred_user_id");
CREATE INDEX "affiliates_referral_referrer_id_fc0dfd05" ON "affiliates_referral" ("referrer_id");
CREATE INDEX "affiliates_affiliatesale_referral_id_96acca12" ON "affiliates_affiliatesale" ("referral_id");
CREATE INDEX "affiliates_affiliatesale_sale_id_cfd87ce0" ON "affiliates_affiliatesale" ("sale_id");
CREATE INDEX "blog_blogpost_author_id_ffcc150f" ON "blog_blogpost" ("author_id");
CREATE INDEX "blog_blogpost_category_id_0e9835dd" ON "blog_blogpost" ("category_id");
CREATE UNIQUE INDEX "blog_blogpost_likes_blogpost_id_user_id_b498480f_uniq" ON "blog_blogpost_likes" ("blogpost_id", "user_id");
CREATE INDEX "blog_blogpost_likes_blogpost_id_58f09903" ON "blog_blogpost_likes" ("blogpost_id");
CREATE INDEX "blog_blogpost_likes_user_id_74889c39" ON "blog_blogpost_likes" ("user_id");
CREATE UNIQUE INDEX "blog_blogpost_tags_blogpost_id_tag_id_657ed214_uniq" ON "blog_blogpost_tags" ("blogpost_id", "tag_id");
CREATE INDEX "blog_blogpost_tags_blogpost_id_cdcddf6c" ON "blog_blogpost_tags" ("blogpost_id");
CREATE INDEX "blog_blogpost_tags_tag_id_680e7081" ON "blog_blogpost_tags" ("tag_id");
CREATE INDEX "blog_blogcomment_author_id_ce11ddad" ON "blog_blogcomment" ("author_id");
CREATE INDEX "blog_blogcomment_post_id_f2a3e760" ON "blog_blogcomment" ("post_id");
CREATE UNIQUE INDEX "blog_savedarticle_user_id_post_id_b47098fd_uniq" ON "blog_savedarticle" ("user_id", "post_id");
CREATE INDEX "blog_savedarticle_post_id_26b13fac" ON "blog_savedarticle" ("post_id");
CREATE INDEX "blog_savedarticle_user_id_2d7a6e78" ON "blog_savedarticle" ("user_id");
CREATE UNIQUE INDEX "courses_enrollment_course_id_student_id_46471c5a_uniq" ON "courses_enrollment" ("course_id", "student_id");
CREATE INDEX "courses_enrollment_course_id_2631503e" ON "courses_enrollment" ("course_id");
CREATE INDEX "courses_enrollment_promo_code_used_id_51601f59" ON "courses_enrollment" ("promo_code_used_id");
CREATE INDEX "courses_enrollment_student_id_aebf8536" ON "courses_enrollment" ("student_id");
CREATE INDEX "dashboard_job_category_id_2298c354" ON "dashboard_job" ("category_id");
CREATE INDEX "dashboard_job_posted_by_id_2fdd723e" ON "dashboard_job" ("posted_by_id");
CREATE UNIQUE INDEX "dashboard_job_favorites_job_id_user_id_ffa151e1_uniq" ON "dashboard_job_favorites" ("job_id", "user_id");
CREATE INDEX "dashboard_job_favorites_job_id_8513f05f" ON "dashboard_job_favorites" ("job_id");
CREATE INDEX "dashboard_job_favorites_user_id_bb2f2484" ON "dashboard_job_favorites" ("user_id");
CREATE UNIQUE INDEX "jobs_job_favorites_job_id_user_id_9c5d8358_uniq" ON "jobs_job_favorites" ("job_id", "user_id");
CREATE INDEX "jobs_job_favorites_job_id_c67f1186" ON "jobs_job_favorites" ("job_id");
CREATE INDEX "jobs_job_favorites_user_id_5847a61b" ON "jobs_job_favorites" ("user_id");
CREATE INDEX "mentorship_mentorshipoffer_mentor_id_64c724b2" ON "mentorship_mentorshipoffer" ("mentor_id");
CREATE INDEX "mentorship_mentorshipapplication_applicant_id_4dcf8fd0" ON "mentorship_mentorshipapplication" ("applicant_id");
CREATE INDEX "mentorship_mentorshipapplication_mentorship_offer_id_aff93818" ON "mentorship_mentorshipapplication" ("mentorship_offer_id");
CREATE INDEX "pricing_subscriptionpurchase_plan_id_737e356c" ON "pricing_subscriptionpurchase" ("plan_id");
CREATE INDEX "pricing_subscriptionpurchase_user_id_9bb9e5f8" ON "pricing_subscriptionpurchase" ("user_id");
CREATE INDEX "products_productsale_buyer_id_201835bf" ON "products_productsale" ("buyer_id");
CREATE INDEX "products_productsale_product_id_5c6be46e" ON "products_productsale" ("product_id");
CREATE INDEX "products_productsale_seller_id_df9e0632" ON "products_productsale" ("seller_id");
CREATE INDEX "django_session_expire_date_a5c62663" ON "django_session" ("expire_date");
CREATE INDEX "transactions_notification_user_id_3c684343" ON "transactions_notification" ("user_id");
CREATE UNIQUE INDEX "products_product_gallery_images_product_id_productimage_id_218e1fe3_uniq" ON "products_product_gallery_images" ("product_id", "productimage_id");
CREATE INDEX "products_product_gallery_images_product_id_b78d62be" ON "products_product_gallery_images" ("product_id");
CREATE INDEX "products_product_gallery_images_productimage_id_f4181619" ON "products_product_gallery_images" ("productimage_id");
CREATE UNIQUE INDEX "site_core_category_name_category_type_195c6ff3_uniq" ON "site_core_category" ("name", "category_type");
CREATE INDEX "courses_course_instructor_id_5b0643dc" ON "courses_course" ("instructor_id");
CREATE INDEX "courses_course_category_id_d64b93bf" ON "courses_course" ("category_id");
CREATE INDEX "jobs_job_posted_by_id_9b3eb7ca" ON "jobs_job" ("posted_by_id");
CREATE INDEX "jobs_job_category_id_fd8331ed" ON "jobs_job" ("category_id");
CREATE INDEX "products_product_seller_id_07afb1e3" ON "products_product" ("seller_id");
CREATE INDEX "products_product_category_id_9b594869" ON "products_product" ("category_id");
COMMIT;





project urls; 
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('dashboard.urls')),
    path('accounts/', include('accounts.urls')),
    path('jobs/', include('jobs.urls')),
    path('courses/', include('courses.urls')),
    path('products/', include('products.urls')),
    path('affiliates/', include('affiliates.urls')),
    path('mentorship/', include('mentorship.urls')),
    path('payments/', include('payments.urls')),
    path('pricing/', include('pricing.urls')),
    path('transactions/', include('transactions.urls')),
    path('blog/', include('blog.urls')),
    path('search/', include('search.urls')),
    path('site-admin/', include('site_core.urls')),
    path('api/', include('api.urls')),

]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATICFILES_DIRS[0])   




accounts app files
views.py;
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib import messages
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.urls import reverse_lazy
from django.views.generic import UpdateView, CreateView
from django.views.generic import DetailView
from jobs.models import Job
from courses.models import Course
from products.models import Product
from django.contrib.auth import login, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import UpdateView, DetailView, CreateView
from django.contrib import messages
from .forms import CustomUserCreationForm, UserProfileForm, BankAccountForm, CryptoWalletForm
from .models import UserProfile, BankAccount, CryptoWallet
from blog.models import BlogPost
from affiliates.models import Referral
from django.contrib.auth import login, authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth.mixins import LoginRequiredMixin
from django.shortcuts import render, redirect, get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import UpdateView, DetailView, CreateView
from django.contrib import messages
from .forms import CustomUserCreationForm, UserProfileForm, BankAccountForm, CryptoWalletForm
from .models import UserProfile, BankAccount, CryptoWallet
from .forms import CustomUserCreationForm, UserProfileForm, BankAccountForm, CryptoWalletForm
from .models import UserProfile, BankAccount, CryptoWallet
from django.http import JsonResponse
from django.contrib.auth import get_user_model

def check_username(request):
    username = request.GET.get("username", "").strip()
    User = get_user_model()

    if not username:
        return JsonResponse({"exists": False, "message": "Please enter a username."})

    exists = User.objects.filter(username__iexact=username).exists()

    if exists:
        return JsonResponse({"exists": True, "message": "This username is already taken."})
    else:
        return JsonResponse({"exists": False, "message": "This username is available!"})


# -------------------------
# REGISTER
# -------------------------
# -------------------------
# REGISTER
# -------------------------
def register_view(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            try:
                user = form.save()
                username = form.cleaned_data.get("username")
                raw_password = form.cleaned_data.get("password1")

                # Authenticate immediately after signup
                user = authenticate(request, username=username, password=raw_password)
                if user:
                    login(request, user)
                    messages.success(request, f"Welcome {user.username}, your account was created successfully!")
                    return redirect("dashboard")
                else:
                    messages.error(request, "User created but automatic login failed. Please log in manually.")
            except Exception as e:
                import traceback
                print("❌ Registration Save Error:", e)
                print(traceback.format_exc())
                messages.error(request, f"Unexpected error: {e}")
        else:
            # Debug: print errors in console
            print("❌ Registration form errors:", form.errors.as_json())

            # Show all field errors to user
            for field, errors in form.errors.items():
                for error in errors:
                    messages.error(request, f"{field.capitalize()}: {error}")
    else:
        form = CustomUserCreationForm()

    return render(request, "accounts/auth/register.html", {"form": form})



# -------------------------
# LOGIN
# -------------------------
def login_view(request):
    if request.method == "POST":
        username_or_email = request.POST.get("username")
        password = request.POST.get("password")

        # allow login with email or username
        from django.contrib.auth import get_user_model
        User = get_user_model()

        try:
            user_obj = User.objects.get(email=username_or_email)
            username = user_obj.username
        except User.DoesNotExist:
            username = username_or_email

        user = authenticate(request, username=username, password=password)

        if user is not None:
            login(request, user)
            messages.success(request, f"Welcome back, {user.get_display_name()}!")
            return redirect("dashboard")  # 👈 where you want after login
        else:
            messages.error(request, "Invalid username/email or password.")

    return render(request, "accounts/auth/login.html")


# -------------------------
# LOGOUT
# -------------------------
@login_required
def logout_view(request):
    logout(request)
    messages.info(request, "You have been logged out.")
    return redirect("login")


class PublicProfileView(DetailView):
    model = UserProfile
    template_name = 'accounts/profile/public.html'
    context_object_name = 'profile_user'
    slug_field = 'user__username'   
    slug_url_kwarg = 'username'

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        profile = self.object        # UserProfile
        user = profile.user  
        
        context.update({
            'user_jobs': Job.objects.filter(posted_by=user, status='approved')[:10],
            'user_courses': Course.objects.filter(instructor=user, status='approved')[:10],
            'user_products': Product.objects.filter(seller=user, status='approved')[:10],
            'user_blog_posts': BlogPost.objects.filter(author=user, status='published')[:10],
            'referral_count': Referral.objects.filter(referrer=user).count(),
            'total_posts': (
                Job.objects.filter(posted_by=user, status='approved').count() +
                Course.objects.filter(instructor=user, status='approved').count() +
                Product.objects.filter(seller=user, status='approved').count() +
                BlogPost.objects.filter(author=user, status='published').count()
            )
        })
        return context




@login_required
def profile_view(request):
    profile = get_object_or_404(UserProfile, user=request.user)
    bank_accounts = BankAccount.objects.filter(user=request.user)
    crypto_wallets = CryptoWallet.objects.filter(user=request.user)
    
    # Check if profile is complete
    profile_complete = all([
        profile.bio,
        profile.country,
        profile.phone_number,
        profile.profile_picture
    ])
    
    context = {
        'profile': profile,
        'bank_accounts': bank_accounts,
        'crypto_wallets': crypto_wallets,
        'profile_complete': profile_complete,
    }
    return render(request, 'accounts/profile/view.html', context)

class ProfileUpdateView(LoginRequiredMixin, UpdateView):
    model = UserProfile
    form_class = UserProfileForm
    template_name = 'accounts/profile/edit.html'
    success_url = reverse_lazy('profile_view')

    def get_object(self):
        return self.request.user.profile

    def form_valid(self, form):
        messages.success(self.request, 'Profile updated successfully!')
        return super().form_valid(form)

    def form_invalid(self, form):
        messages.error(self.request, 'Please correct the errors below.')
        return super().form_invalid(form)

@login_required
def check_profile_complete(request):
    """Check if user profile is complete before allowing post creation"""
    profile = request.user.profile
    profile_complete = all([
        profile.bio,
        profile.country,
        profile.phone_number,
        profile.profile_picture
    ])
    
    if not profile_complete:
        messages.warning(
            request, 
            'Please complete your profile before creating content. '
            'You need to add your bio, country, phone number, and profile picture.'
        )
        return redirect('profile_edit')
    return None

@login_required
def create_job_redirect(request):
    """Redirect to profile completion if not complete"""
    check = check_profile_complete(request)
    if check:
        return check
    return redirect('job_create')

@login_required
def create_course_redirect(request):
    """Redirect to profile completion if not complete"""
    check = check_profile_complete(request)
    if check:
        return check
    return redirect('course_create')

@login_required
def create_product_redirect(request):
    """Redirect to profile completion if not complete"""
    check = check_profile_complete(request)
    if check:
        return check
    return redirect('product_create')

@login_required
def create_blog_redirect(request):
    """Redirect to profile completion if not complete"""
    check = check_profile_complete(request)
    if check:
        return check
    return redirect('blog_create')

class BankAccountCreateView(LoginRequiredMixin, CreateView):
    model = BankAccount
    form_class = BankAccountForm
    template_name = 'accounts/profile/bank_account_form.html'
    success_url = reverse_lazy('profile_view')

    def form_valid(self, form):
        form.instance.user = self.request.user
        messages.success(self.request, 'Bank account added successfully!')
        return super().form_valid(form)

class CryptoWalletCreateView(LoginRequiredMixin, CreateView):
    model = CryptoWallet
    form_class = CryptoWalletForm
    template_name = 'accounts/profile/crypto_wallet_form.html'
    success_url = reverse_lazy('profile_view')

    def form_valid(self, form):
        form.instance.user = self.request.user
        messages.success(self.request, 'Crypto wallet added successfully!')
        return super().form_valid(form)


urls.py
from django.urls import path
from django.contrib.auth import views as auth_views
from . import views

urlpatterns = [
    path("register/", views.register_view, name="register"),
    path("login/", views.login_view, name="login"),
    path("logout/", views.logout_view, name="logout"),
    path("profile/", views.profile_view, name="profile_view"),
    path("check-username/", views.check_username, name="check_username"),
    path("profile/<str:username>/", views.PublicProfileView.as_view(), name="public_profile"),

    
    path('profile/edit/', views.ProfileUpdateView.as_view(), name='profile_edit'),
    path('bank-account/add/', views.BankAccountCreateView.as_view(), name='bank_account_add'),
    path('crypto-wallet/add/', views.CryptoWalletCreateView.as_view(), name='crypto_wallet_add'),


]




models.py
from django.contrib.auth.models import AbstractUser, Group, Permission
from django.db import models
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils.crypto import get_random_string


class User(AbstractUser):
    SUBSCRIPTION_CHOICES = [
        ('starter', 'Starter'),
        ('pro', 'Pro'),
        ('mentorship', 'Mentorship'),
    ]

    subscription_level = models.CharField(
        max_length=20,
        choices=SUBSCRIPTION_CHOICES,
        default='starter'
    )
    referral_code = models.CharField(max_length=20, unique=True, blank=True)
    is_verified = models.BooleanField(default=False)
    date_updated = models.DateTimeField(auto_now=True)

    # 🔑 Fix clashes with auth.User
    groups = models.ManyToManyField(
        Group,
        related_name="custom_user_groups",  # use "+" if you don’t need reverse access
        blank=True
    )
    user_permissions = models.ManyToManyField(
        Permission,
        related_name="custom_user_permissions",  # use "+" if you don’t need reverse access
        blank=True
    )

    def save(self, *args, **kwargs):
        if not self.referral_code:
            self.referral_code = self._generate_referral_code()
        super().save(*args, **kwargs)

    def _generate_referral_code(self):
        code = get_random_string(8).upper()
        while User.objects.filter(referral_code=code).exists():
            code = get_random_string(8).upper()
        return code

    def get_display_name(self):
        if self.first_name and self.last_name:
            return f"{self.first_name} {self.last_name}"
        return self.username


class UserProfile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')
    bio = models.TextField(max_length=500, blank=True)
    profile_picture = models.ImageField(upload_to='profile_pics/', blank=True, null=True)
    country = models.CharField(max_length=100, blank=True)
    phone_number = models.CharField(max_length=20, blank=True)

    # ✅ specify unique related_name to avoid confusion
    referred_by = models.ForeignKey(
        User,
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='profile_referrals'
    )
    date_joined = models.DateTimeField(auto_now_add=True)
    
    @property
    def is_complete(self):
        """Check if profile is complete for content creation"""
        return all([
            self.bio,
            self.country,
            self.phone_number,
            self.profile_picture
        ])

    def __str__(self):
        return f"{self.user.username}'s Profile"


class BankAccount(models.Model):
    ACCOUNT_TYPES = [
        ('savings', 'Savings'),
        ('current', 'Current'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='bank_accounts')
    bank_name = models.CharField(max_length=100)
    account_number = models.CharField(max_length=20)
    account_name = models.CharField(max_length=100)
    account_type = models.CharField(max_length=10, choices=ACCOUNT_TYPES, default='savings')
    is_primary = models.BooleanField(default=False)
    is_verified = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['user', 'account_number']

    def __str__(self):
        return f"{self.bank_name} - {self.account_number}"


class CryptoWallet(models.Model):
    CRYPTO_TYPES = [
        ('btc', 'Bitcoin'),
        ('eth', 'Ethereum'),
        ('usdt', 'Tether'),
        ('bnb', 'Binance Coin'),
    ]

    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='crypto_wallets')
    crypto_type = models.CharField(max_length=10, choices=CRYPTO_TYPES)
    wallet_address = models.CharField(max_length=255)
    network = models.CharField(max_length=50, blank=True)
    is_primary = models.BooleanField(default=False)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ['user', 'wallet_address']

    def __str__(self):
        return f"{self.crypto_type} - {self.wallet_address[:10]}..."


# ✅ Signals
@receiver(post_save, sender=User)
def create_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)


@receiver(post_save, sender=User)
def save_user_profile(sender, instance, **kwargs):
    if hasattr(instance, 'profile'):
        instance.profile.save()





forms.py;
from django import forms
from django.contrib.auth.forms import UserCreationForm, UserChangeForm
from .models import User, UserProfile, BankAccount, CryptoWallet

class CustomUserCreationForm(UserCreationForm):
    referral_code = forms.CharField(required=False, help_text="Optional referral code from another user")
    
    class Meta:
        model = User
        fields = ('username', 'email', 'first_name', 'last_name', 'referral_code')

class CustomUserChangeForm(UserChangeForm):
    class Meta:
        model = User
        fields = ('username', 'email', 'first_name', 'last_name', 'subscription_level')

class UserProfileForm(forms.ModelForm):
    class Meta:
        model = UserProfile
        fields = ('bio', 'profile_picture', 'country', 'phone_number')
        widgets = {
            'bio': forms.Textarea(attrs={
                'rows': 4,
                'placeholder': 'Tell us about yourself, your skills, and experience...'
            }),
            'country': forms.TextInput(attrs={
                'placeholder': 'e.g., Nigeria, United States...'
            }),
            'phone_number': forms.TextInput(attrs={
                'placeholder': 'e.g., +2348012345678'
            }),
        }
    
    def clean_phone_number(self):
        phone_number = self.cleaned_data.get('phone_number')
        if phone_number and not phone_number.startswith('+'):
            raise forms.ValidationError("Please include country code (e.g., +2348012345678)")
        return phone_number

class BankAccountForm(forms.ModelForm):
    class Meta:
        model = BankAccount
        fields = ('bank_name', 'account_number', 'account_name', 'account_type', 'is_primary')
        widgets = {
            'bank_name': forms.TextInput(attrs={'placeholder': 'e.g., GTBank, Zenith Bank'}),
            'account_number': forms.TextInput(attrs={'placeholder': '10-digit account number'}),
            'account_name': forms.TextInput(attrs={'placeholder': 'Name as it appears on bank account'}),
        }
        
    def clean(self):
        cleaned_data = super().clean()
        is_primary = cleaned_data.get('is_primary')
        user = getattr(self, 'user', None)
        
        if is_primary and user:
            BankAccount.objects.filter(user=user, is_primary=True).update(is_primary=False)
        
        return cleaned_data

class CryptoWalletForm(forms.ModelForm):
    class Meta:
        model = CryptoWallet
        fields = ('crypto_type', 'wallet_address', 'network', 'is_primary')
        widgets = {
            'wallet_address': forms.TextInput(attrs={'placeholder': 'Your cryptocurrency wallet address'}),
            'network': forms.TextInput(attrs={'placeholder': 'e.g., ERC20, BEP20, TRC20'}),
        }
        
    def clean(self):
        cleaned_data = super().clean()
        is_primary = cleaned_data.get('is_primary')
        user = getattr(self, 'user', None)
        
        if is_primary and user:
            CryptoWallet.objects.filter(user=user, is_primary=True).update(is_primary=False)
        
        return cleaned_data



admin.py;

from django.contrib import admin
from django.contrib.auth.admin import UserAdmin
from .models import User, UserProfile, BankAccount, CryptoWallet


class UserProfileInline(admin.StackedInline):
    model = UserProfile
    fk_name = "user"   # ✅ Tell Django to use the OneToOne field, not referred_by
    can_delete = False


class CustomUserAdmin(UserAdmin):
    list_display = ('username', 'email', 'subscription_level', 'is_verified', 'date_joined')
    list_filter = ('subscription_level', 'is_verified', 'is_staff', 'is_superuser')
    fieldsets = UserAdmin.fieldsets + (
        ('Vinaji Profile', {
            'fields': ('subscription_level', 'referral_code', 'is_verified')
        }),
    )
    inlines = [UserProfileInline]


@admin.register(BankAccount)
class BankAccountAdmin(admin.ModelAdmin):
    list_display = ('user', 'bank_name', 'account_number', 'account_name', 'is_primary', 'is_verified')
    list_filter = ('bank_name', 'is_primary', 'is_verified')
    search_fields = ('user__username', 'account_number', 'account_name')


@admin.register(CryptoWallet)
class CryptoWalletAdmin(admin.ModelAdmin):
    list_display = ('user', 'crypto_type', 'wallet_address_short', 'is_primary')
    list_filter = ('crypto_type', 'is_primary')
    search_fields = ('user__username', 'wallet_address')

    def wallet_address_short(self, obj):
        return f"{obj.wallet_address[:10]}..." if obj.wallet_address else ""
    wallet_address_short.short_description = 'Wallet Address'


admin.site.register(User, CustomUserAdmin)



the app name that handles admin is called 'site_core'. see its codes

views.py;
from django.contrib.admin.views.decorators import staff_member_required
from django.shortcuts import render, get_object_or_404, redirect
from django.contrib import messages
from django.db.models import Count, Sum, Q
from django.utils import timezone
from django.core.paginator import Paginator
from datetime import timedelta
from jobs.models import Job
from courses.models import Course
from products.models import Product
from blog.models import BlogPost
from accounts.models import User, UserProfile
from payments.models import Transaction
from affiliates.models import Referral, AffiliateSale
from .models import SiteSetting, Category, AdminNotification
from .forms import SiteSettingForm, CategoryForm, AdminNotificationForm

@staff_member_required
def admin_dashboard(request):
    # Basic Statistics
    total_users = User.objects.count()
    total_jobs = Job.objects.count()
    total_courses = Course.objects.count()
    total_products = Product.objects.count()
    total_blog_posts = BlogPost.objects.count()
    
    # Pending approvals
    pending_jobs = Job.objects.filter(status='pending').count()
    pending_courses = Course.objects.filter(status='pending').count()
    pending_products = Product.objects.filter(status='pending').count()
    pending_blog_posts = BlogPost.objects.filter(status='pending').count()
    
    # Financial Statistics
    total_balance = Transaction.get_total_platform_balance()
    pending_withdrawals = Transaction.objects.filter(
        transaction_type='withdraw', 
        status='pending'
    ).aggregate(total=Sum('amount'))['total'] or 0
    
    # Recent Activity
    recent_users = User.objects.order_by('-date_joined')[:5]
    recent_transactions = Transaction.objects.select_related('user').order_by('-created_at')[:10]
    
    # Top Performers (Last 7 days)
    week_ago = timezone.now() - timedelta(days=7)
    
    top_earners = Transaction.objects.filter(
        status='completed',
        created_at__gte=week_ago,
        transaction_type__in=['sale', 'commission']
    ).values('user__username').annotate(
        total_earned=Sum('amount')
    ).order_by('-total_earned')[:5]
    
    top_referrers = Referral.objects.filter(
        joined_at__gte=week_ago
    ).values('referrer__username').annotate(
        referral_count=Count('id')
    ).order_by('-referral_count')[:5]
    
    context = {
        'total_users': total_users,
        'total_jobs': total_jobs,
        'total_courses': total_courses,
        'total_products': total_products,
        'total_blog_posts': total_blog_posts,
        'pending_jobs': pending_jobs,
        'pending_courses': pending_courses,
        'pending_products': pending_products,
        'pending_blog_posts': pending_blog_posts,
        'total_balance': total_balance,
        'pending_withdrawals': pending_withdrawals,
        'recent_users': recent_users,
        'recent_transactions': recent_transactions,
        'top_earners': top_earners,
        'top_referrers': top_referrers,
    }
    
    return render(request, 'admin_panel/dashboard.html', context)

@staff_member_required
def user_management(request):
    users = User.objects.select_related('profile').all()
    
    # Filters
    search = request.GET.get('search', '')
    status = request.GET.get('status', '')
    
    if search:
        users = users.filter(
            Q(username__icontains=search) |
            Q(email__icontains=search) |
            Q(first_name__icontains=search) |
            Q(last_name__icontains=search)
        )
    
    if status == 'active':
        users = users.filter(is_active=True)
    elif status == 'inactive':
        users = users.filter(is_active=False)
    
    paginator = Paginator(users, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'users': page_obj,
        'search': search,
        'status': status,
    }
    return render(request, 'admin_panel/user_management.html', context)

@staff_member_required
def user_detail(request, user_id):
    user = get_object_or_404(User, id=user_id)
    user_transactions = Transaction.objects.filter(user=user).order_by('-created_at')[:20]
    user_jobs = Job.objects.filter(posted_by=user)
    user_courses = Course.objects.filter(instructor=user)
    user_products = Product.objects.filter(seller=user)
    user_blog_posts = BlogPost.objects.filter(author=user)
    user_referrals = Referral.objects.filter(referrer=user)
    
    context = {
        'user': user,
        'transactions': user_transactions,
        'jobs': user_jobs,
        'courses': user_courses,
        'products': user_products,
        'blog_posts': user_blog_posts,
        'referrals': user_referrals,
    }
    return render(request, 'admin_panel/user_detail.html', context)

@staff_member_required
def toggle_user_status(request, user_id):
    user = get_object_or_404(User, id=user_id)
    user.is_active = not user.is_active
    user.save()
    
    action = "activated" if user.is_active else "deactivated"
    messages.success(request, f"User {user.username} has been {action}.")
    return redirect('user_management')

@staff_member_required
def category_management(request):
    categories = Category.objects.all()
    form = CategoryForm(request.POST or None)
    
    if request.method == 'POST' and form.is_valid():
        form.save()
        messages.success(request, 'Category created successfully.')
        return redirect('category_management')
    
    context = {
        'categories': categories,
        'form': form,
    }
    return render(request, 'admin_panel/category_management.html', context)

@staff_member_required
def edit_category(request, category_id):
    category = get_object_or_404(Category, id=category_id)
    form = CategoryForm(request.POST or None, instance=category)
    
    if request.method == 'POST' and form.is_valid():
        form.save()
        messages.success(request, 'Category updated successfully.')
        return redirect('category_management')
    
    context = {
        'category': category,
        'form': form,
    }
    return render(request, 'admin_panel/edit_category.html', context)

@staff_member_required
def delete_category(request, category_id):
    category = get_object_or_404(Category, id=category_id)
    category.delete()
    messages.success(request, 'Category deleted successfully.')
    return redirect('category_management')

@staff_member_required
def financial_management(request):
    # Withdrawal requests
    withdrawal_requests = Transaction.objects.filter(
        transaction_type='withdraw',
        status='pending'
    ).select_related('user').order_by('-created_at')
    
    # Deposit requests (if manual mode)
    deposit_requests = Transaction.objects.filter(
        transaction_type='add_money',
        status='pending'
    ).select_related('user').order_by('-created_at')
    
    # Financial stats
    total_earnings = Transaction.objects.filter(
        transaction_type='admin_fee',
        status='completed'
    ).aggregate(total=Sum('amount'))['total'] or 0
    
    context = {
        'withdrawal_requests': withdrawal_requests,
        'deposit_requests': deposit_requests,
        'total_earnings': total_earnings,
    }
    return render(request, 'admin_panel/financial_management.html', context)

@staff_member_required
def process_transaction(request, transaction_id, action):
    transaction = get_object_or_404(Transaction, id=transaction_id)
    
    if action == 'approve':
        if transaction.approve():
            messages.success(request, 'Transaction approved successfully.')
        else:
            messages.error(request, 'Failed to approve transaction.')
    elif action == 'reject':
        transaction.reject("Rejected by admin")
        messages.success(request, 'Transaction rejected successfully.')
    
    return redirect('financial_management')

@staff_member_required
def analytics_dashboard(request):
    # Time period filter
    period = request.GET.get('period', '7')
    days = int(period)
    start_date = timezone.now() - timedelta(days=days)
    
    # User analytics
    new_users = User.objects.filter(date_joined__gte=start_date).count()
    active_users = User.objects.filter(last_login__gte=start_date).count()
    
    # Content analytics
    new_jobs = Job.objects.filter(created_at__gte=start_date).count()
    new_courses = Course.objects.filter(created_at__gte=start_date).count()
    new_products = Product.objects.filter(created_at__gte=start_date).count()
    new_posts = BlogPost.objects.filter(created_at__gte=start_date).count()
    
    # Top performers
    top_earners = Transaction.objects.filter(
        status='completed',
        created_at__gte=start_date,
        transaction_type__in=['sale', 'commission']
    ).values('user__username', 'user__profile__country').annotate(
        total_earned=Sum('amount')
    ).order_by('-total_earned')[:10]
    
    top_posters = User.objects.annotate(
        job_count=Count('posted_jobs', filter=Q(posted_jobs__created_at__gte=start_date)),
        course_count=Count('courses_taught', filter=Q(courses_taught__created_at__gte=start_date)),
        product_count=Count('products', filter=Q(products__created_at__gte=start_date)),
        post_count=Count('blog_posts', filter=Q(blog_posts__created_at__gte=start_date)),
        total_content=Count('posted_jobs', filter=Q(posted_jobs__created_at__gte=start_date)) +
                     Count('courses_taught', filter=Q(courses_taught__created_at__gte=start_date)) +
                     Count('products', filter=Q(products__created_at__gte=start_date)) +
                     Count('blog_posts', filter=Q(blog_posts__created_at__gte=start_date))
    ).filter(total_content__gt=0).order_by('-total_content')[:10]
    
    context = {
        'period': period,
        'new_users': new_users,
        'active_users': active_users,
        'new_jobs': new_jobs,
        'new_courses': new_courses,
        'new_products': new_products,
        'new_posts': new_posts,
        'top_earners': top_earners,
        'top_posters': top_posters,
    }
    return render(request, 'admin_panel/analytics.html', context)


from django.views.decorators.http import require_POST

@staff_member_required
@require_POST
def delete_notification(request, notification_id):
    notification = get_object_or_404(AdminNotification, id=notification_id)
    notification.delete()
    messages.success(request, f"Notification '{notification.title}' was deleted successfully.")
    return redirect('notification_management')


@staff_member_required
def toggle_notification(request, notification_id):
    notification = get_object_or_404(AdminNotification, id=notification_id)

    # Example: toggle "is_active" field (adjust depending on your model)
    notification.is_active = not notification.is_active
    notification.save()

    messages.success(
        request,
        f"Notification '{notification.title}' has been {'activated' if notification.is_active else 'deactivated'}."
    )
    return redirect('notification_management')


@staff_member_required
def notification_management(request):
    notifications = AdminNotification.objects.all().order_by('-created_at')
    form = AdminNotificationForm(request.POST or None)
    
    if request.method == 'POST' and form.is_valid():
        form.save()
        messages.success(request, 'Notification created successfully.')
        return redirect('notification_management')
    
    context = {
        'notifications': notifications,
        'form': form,
    }
    return render(request, 'admin_panel/notification_management.html', context)

@staff_member_required
def site_settings(request):
    site_settings = SiteSetting.get_solo()
    form = SiteSettingForm(request.POST or None, instance=site_settings)
    
    if request.method == 'POST' and form.is_valid():
        form.save()
        messages.success(request, 'Site settings updated successfully.')
        return redirect('settings')
    
    context = {
        'form': form,
        'site_settings': site_settings,
    }
    return render(request, 'admin_panel/settings.html', context)

@staff_member_required
def moderation_panel(request):
    pending_jobs = Job.objects.filter(status='pending').select_related('posted_by', 'category')
    pending_courses = Course.objects.filter(status='pending').select_related('instructor', 'category')
    pending_products = Product.objects.filter(status='pending').select_related('seller', 'category')
    pending_blog_posts = BlogPost.objects.filter(status='pending').select_related('author', 'category')
    
    context = {
        'pending_jobs': pending_jobs,
        'pending_courses': pending_courses,
        'pending_products': pending_products,
        'pending_blog_posts': pending_blog_posts,
    }
    
    return render(request, 'admin_panel/moderation.html', context)



urls.py
from django.urls import path
from . import views

urlpatterns = [
    # Dashboard
    path('dashboard/', views.admin_dashboard, name='admin_dashboard'),
    
    # User Management
    path('users/', views.user_management, name='user_management'),
    path('users/<int:user_id>/', views.user_detail, name='user_detail'),
    path('users/<int:user_id>/toggle/', views.toggle_user_status, name='toggle_user_status'),
    
    # Category Management
    path('categories/', views.category_management, name='category_management'),
    path('categories/<int:category_id>/edit/', views.edit_category, name='edit_category'),
    path('categories/<int:category_id>/delete/', views.delete_category, name='delete_category'),
    
    # Financial Management
    path('financial/', views.financial_management, name='financial_management'),
    path('transactions/<int:transaction_id>/<str:action>/', views.process_transaction, name='process_transaction'),
    path('notifications/toggle/<int:notification_id>/', views.toggle_notification, name='toggle_notification'),
    path('notifications/delete/<int:notification_id>/', views.delete_notification, name='delete_notification'),


    
    # Analytics
    path('analytics/', views.analytics_dashboard, name='analytics'),
    
    # Notifications
    path('notifications/', views.notification_management, name='notification_management'),
    
    # Settings
    path('settings/', views.site_settings, name='site_settings'),
    
    # Moderation
    path('moderation/', views.moderation_panel, name='moderation_panel'),
]



models.py
from django.db import models
from django.conf import settings
from django.utils.translation import gettext_lazy as _

class SiteSetting(models.Model):
    CURRENCY_CHOICES = [
        ('NGN', 'Nigerian Naira (NGN)'),
        ('USD', 'US Dollar (USD)'),
    ]
    
    PAYMENT_MODE_CHOICES = [
        ('manual', 'Manual Approval'),
        ('auto', 'Auto Process'),
    ]
    
    # Currency Settings
    currency = models.CharField(max_length=3, choices=CURRENCY_CHOICES, default='NGN')
    currency_rate = models.DecimalField(max_digits=10, decimal_places=4, default=1.0)
    
    # Fee Settings
    add_money_fee_pct = models.DecimalField(max_digits=5, decimal_places=2, default=1.5)
    transfer_fee_pct = models.DecimalField(max_digits=5, decimal_places=2, default=0.5)
    withdraw_fee_pct = models.DecimalField(max_digits=5, decimal_places=2, default=2.0)
    mentorship_fee_pct = models.DecimalField(max_digits=5, decimal_places=2, default=10.0)
    default_commission_pct = models.DecimalField(max_digits=5, decimal_places=2, default=20.0)
    
    # Payment Settings
    deposit_mode = models.CharField(max_length=10, choices=PAYMENT_MODE_CHOICES, default='manual')
    withdrawal_mode = models.CharField(max_length=10, choices=PAYMENT_MODE_CHOICES, default='manual')
    
    # Manual Payment Details
    manual_bank_name = models.CharField(max_length=100, blank=True)
    manual_account_number = models.CharField(max_length=20, blank=True)
    manual_account_name = models.CharField(max_length=100, blank=True)
    
    # Auto Payment API Keys
    monnify_api_key = models.CharField(max_length=255, blank=True)
    monnify_secret_key = models.CharField(max_length=255, blank=True)
    paystack_public_key = models.CharField(max_length=255, blank=True)
    paystack_secret_key = models.CharField(max_length=255, blank=True)
    
    # Feature Toggles
    pause_course_uploading = models.BooleanField(default=False)
    pause_gigs_uploading = models.BooleanField(default=False)
    pause_affiliates = models.BooleanField(default=False)
    
    # Site Information
    site_title = models.CharField(max_length=200, default='Vinaji NG')
    site_description = models.TextField(blank=True)
    contact_email = models.EmailField(default='support@vinaji.com')
    legal_text = models.TextField(blank=True)
    
    # Default Subscription Prices
    default_subscription_prices = models.JSONField(default=dict)
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "Site Setting"
        verbose_name_plural = "Site Settings"

    def __str__(self):
        return "Site Settings"

    def save(self, *args, **kwargs):
        self.pk = 1
        super().save(*args, **kwargs)

    @classmethod
    def get_solo(cls):
        obj, created = cls.objects.get_or_create(pk=1)
        return obj

class Category(models.Model):
    CATEGORY_TYPES = [
        ('job', 'Job'),
        ('course', 'Course'),
        ('product', 'Product'),
        ('blog', 'Blog'),
    ]
    
    name = models.CharField(max_length=100)
    category_type = models.CharField(max_length=10, choices=CATEGORY_TYPES)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(default=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name_plural = "Categories"
        unique_together = ['name', 'category_type']

    def __str__(self):
        return f"{self.name} ({self.get_category_type_display()})"

class AdminNotification(models.Model):
    title = models.CharField(max_length=200)
    message = models.TextField()
    notification_type = models.CharField(max_length=20, choices=[
        ('info', 'Information'),
        ('warning', 'Warning'),
        ('success', 'Success'),
        ('error', 'Error'),
    ])
    action_url = models.URLField(blank=True)
    action_text = models.CharField(max_length=50, blank=True)
    is_active = models.BooleanField(default=True)
    show_popup = models.BooleanField(default=False)
    start_date = models.DateTimeField()
    end_date = models.DateTimeField()
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.title

    def is_current(self):
        from django.utils import timezone
        return self.is_active and self.start_date <= timezone.now() <= self.end_date



forms.py
from django import forms
from .models import SiteSetting, Category, AdminNotification

# site_core/forms.py - Update the SiteSettingForm
class SiteSettingForm(forms.ModelForm):
    class Meta:
        model = SiteSetting
        fields = '__all__'
        widgets = {
            'site_description': forms.Textarea(attrs={'rows': 3}),
            'legal_text': forms.Textarea(attrs={'rows': 4}),
            'monnify_api_key': forms.PasswordInput(render_value=True),
            'monnify_secret_key': forms.PasswordInput(render_value=True),
            'paystack_public_key': forms.PasswordInput(render_value=True),
            'paystack_secret_key': forms.PasswordInput(render_value=True),
            'default_subscription_prices': forms.Textarea(attrs={'rows': 3, 'placeholder': '{"starter": 0, "pro": 5000, "mentorship": 15000}'}),
        }
        

class CategoryForm(forms.ModelForm):
    class Meta:
        model = Category
        fields = ['name', 'category_type', 'description', 'is_active']
        widgets = {
            'description': forms.Textarea(attrs={'rows': 3}),
        }

class AdminNotificationForm(forms.ModelForm):
    class Meta:
        model = AdminNotification
        fields = ['title', 'message', 'notification_type', 'action_url', 'action_text', 'show_popup', 'start_date', 'end_date']
        widgets = {
            'message': forms.Textarea(attrs={'rows': 4}),
            'start_date': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
            'end_date': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
        }




context_processors.py

from .models import SiteSetting

def site_settings(request):
    return {
        'site_settings': SiteSetting.get_solo()
    }


admin.py
from django.contrib import admin
from django.utils.html import format_html
from .models import SiteSetting

@admin.register(SiteSetting)
class SiteSettingAdmin(admin.ModelAdmin):
    list_display = ('site_title', 'currency', 'currency_rate', 'contact_email', 'updated_at')
    fieldsets = (
        ('Currency Settings', {
            'fields': ('currency', 'currency_rate')
        }),
        ('Fee Settings', {
            'fields': (
                'add_money_fee_pct', 
                'transfer_fee_pct', 
                'withdraw_fee_pct',
                'mentorship_fee_pct',
                'default_commission_pct'
            )
        }),
        ('Feature Toggles', {
            'fields': (
                'pause_course_uploading',
                'pause_gigs_uploading', 
                'pause_affiliates'
            )
        }),
        ('Site Information', {
            'fields': (
                'site_title', 
                'site_description', 
                'contact_email', 
                'legal_text'
            )
        }),
        ('Subscription Prices', {
            'fields': ('default_subscription_prices',)
        }),
    )
    
    def has_add_permission(self, request):
        return False
    
    def has_delete_permission(self, request, obj=None):
        return False


products, course, jobs codes.

products/views.py
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.core.paginator import Paginator
from django.db.models import Q
from django.shortcuts import render, get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .models import Product, ProductSale
from .forms import ProductForm
from site_core.models import Category

class ProductListView(ListView):
    model = Product
    template_name = 'products/list.html'
    context_object_name = 'products'
    paginate_by = 20
    
    def get_queryset(self):
        queryset = Product.objects.filter(status='approved').select_related('seller', 'category')
        
        category = self.request.GET.get('category')
        license_type = self.request.GET.get('license_type')
        min_price = self.request.GET.get('min_price')
        max_price = self.request.GET.get('max_price')
        search = self.request.GET.get('search')
        
        if category:
            queryset = queryset.filter(category__name=category)
        if license_type:
            queryset = queryset.filter(license_type=license_type)
        if min_price:
            queryset = queryset.filter(price__gte=min_price)
        if max_price:
            queryset = queryset.filter(price__lte=max_price)
        if search:
            queryset = queryset.filter(
                Q(title__icontains=search) |
                Q(description__icontains=search)
            )
            
        return queryset
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.filter(category_type="job", is_active=True)
        return context

class ProductDetailView(DetailView):
    model = Product
    template_name = 'products/detail.html'
    context_object_name = 'product'
    
    def get_object(self):
        obj = super().get_object()
        obj.increment_views()
        return obj

class ProductCreateView(LoginRequiredMixin, CreateView):
    model = Product
    form_class = ProductForm
    template_name = 'products/create.html'
    success_url = reverse_lazy('products_list')
    
    def form_valid(self, form):
        form.instance.seller = self.request.user
        form.instance.status = 'pending'
        return super().form_valid(form)

class ProductUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Product
    form_class = ProductForm
    template_name = 'products/edit.html'
    success_url = reverse_lazy('products_list')
    
    def test_func(self):
        product = self.get_object()
        return product.seller == self.request.user




product urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.ProductListView.as_view(), name='products_list'),
    path('<int:pk>/', views.ProductDetailView.as_view(), name='product_detail'),
    path('create/', views.ProductCreateView.as_view(), name='product_create'),
    path('<int:pk>/edit/', views.ProductUpdateView.as_view(), name='product_edit'),
]


product models.py
from django.db import models
from django.conf import settings
from django.core.validators import FileExtensionValidator
from site_core.models import Category

class ProductCategory(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

class Product(models.Model):
    LICENSE_TYPES = [
        ('personal', 'Personal Use'),
        ('commercial', 'Commercial Use'),
        ('enterprise', 'Enterprise'),
    ]
    
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('pending', 'Pending Approval'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    title = models.CharField(max_length=200)
    description = models.TextField()
    category = models.ForeignKey(ProductCategory, on_delete=models.CASCADE, related_name='products')
    seller = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='products')
    license_type = models.CharField(max_length=20, choices=LICENSE_TYPES, default='personal')
    version = models.CharField(max_length=20, default='1.0')
    price = models.DecimalField(max_digits=10, decimal_places=2)
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name='products',
        limit_choices_to={'category_type': 'product'}
    )

    
    # Media
    thumbnail = models.ImageField(upload_to='product_thumbnails/', blank=True, null=True)
    gallery_images = models.ManyToManyField('ProductImage', blank=True)
    
    # Files
    product_file = models.FileField(
        upload_to='product_files/',
        validators=[FileExtensionValidator(allowed_extensions=['zip', 'pdf', 'doc', 'docx'])]
    )
    sample_file = models.FileField(
        upload_to='sample_files/',
        blank=True,
        null=True,
        validators=[FileExtensionValidator(allowed_extensions=['pdf', 'jpg', 'png'])]
    )
    
    # Additional details
    features = models.TextField(blank=True, help_text="List of features (one per line)")
    tags = models.CharField(max_length=500, blank=True, help_text="Comma-separated tags")
    
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    rejection_reason = models.TextField(blank=True)
    views_count = models.PositiveIntegerField(default=0)
    download_count = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return self.title

    def increment_views(self):
        self.views_count += 1
        self.save(update_fields=['views_count'])

    def increment_downloads(self):
        self.download_count += 1
        self.save(update_fields=['download_count'])

    def get_features_list(self):
        return [feature.strip() for feature in self.features.split('\n') if feature.strip()]

    def get_tags_list(self):
        return [tag.strip() for tag in self.tags.split(',') if tag.strip()]

class ProductImage(models.Model):
    image = models.ImageField(upload_to='product_gallery/')
    caption = models.CharField(max_length=200, blank=True)
    order = models.PositiveIntegerField(default=0)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['order']

    def __str__(self):
        return f"Image for {self.product.title}"
    



class PromoCode(models.Model):
    code = models.CharField(max_length=50, unique=True)
    discount_percent = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    max_uses = models.PositiveIntegerField(default=1)
    used_count = models.PositiveIntegerField(default=0)
    valid_until = models.DateTimeField()
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.code

    def is_valid(self):
        return (self.is_active and 
                self.used_count < self.max_uses and 
                self.valid_until > timezone.now())

class ProductSale(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('completed', 'Completed'),
        ('refunded', 'Refunded'),
        ('cancelled', 'Cancelled'),
    ]

    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='sales')
    buyer = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='product_purchases')
    seller = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='product_sales')
    sale_price = models.DecimalField(max_digits=10, decimal_places=2)
    commission_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    admin_fee = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    net_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    purchased_at = models.DateTimeField(auto_now_add=True)
    license_key = models.CharField(max_length=100, blank=True)
    download_count = models.PositiveIntegerField(default=0)

    class Meta:
        ordering = ['-purchased_at']

    def __str__(self):
        return f"{self.product.title} - {self.buyer.username}"

    def save(self, *args, **kwargs):
        if not self.license_key:
            import uuid
            self.license_key = str(uuid.uuid4())[:16].upper()
        super().save(*args, **kwargs)



product form.py
from django import forms
from .models import Product
from site_core.models import Category  # adjust this import to match your project structure

class ProductForm(forms.ModelForm):
    class Meta:
        model = Product
        fields = [
            'title', 'description', 'category', 'license_type', 'version',
            'price', 'product_file', 'sample_file', 'thumbnail',
        ]
        widgets = {
            'description': forms.Textarea(attrs={'rows': 4}),
            'category': forms.Select(attrs={
                'class': 'mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Only show categories meant for Products
        self.fields['category'].queryset = Category.objects.filter(category_type='product')

    def clean_price(self):
        price = self.cleaned_data.get('price')
        if price and price < 0:
            raise forms.ValidationError("Price cannot be negative.")
        return price



product admin.py
from django.contrib import admin
from .models import ProductCategory, Product, ProductSale

@admin.register(ProductCategory)
class ProductCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'is_active', 'product_count')
    list_filter = ('is_active',)
    search_fields = ('name',)
    
    def product_count(self, obj):
        return obj.products.count()
    product_count.short_description = 'Products'

@admin.register(Product)
class ProductAdmin(admin.ModelAdmin):
    list_display = ('title', 'seller', 'category', 'license_type', 'price', 'status', 'views_count', 'download_count', 'created_at')
    list_filter = ('status', 'license_type', 'category', 'created_at')
    search_fields = ('title', 'description', 'seller__username')
    readonly_fields = ('created_at', 'updated_at', 'views_count', 'download_count')
    actions = ['approve_products', 'reject_products']
    
    def approve_products(self, request, queryset):
        updated = queryset.update(status='approved')
        self.message_user(request, f'{updated} products approved successfully.')
    approve_products.short_description = "Approve selected products"
    
    def reject_products(self, request, queryset):
        for product in queryset:
            product.status = 'rejected'
            product.save()
        self.message_user(request, f'{queryset.count()} products rejected.')
    reject_products.short_description = "Reject selected products"

@admin.register(ProductSale)
class ProductSaleAdmin(admin.ModelAdmin):
    list_display = ('product', 'buyer', 'seller', 'sale_price', 'commission_amount', 'net_amount', 'status', 'purchased_at')
    list_filter = ('status', 'purchased_at')
    search_fields = ('product__title', 'buyer__username', 'seller__username')
    readonly_fields = ('purchased_at', 'license_key')



Next app: courses:
views.py
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.core.paginator import Paginator
from django.db.models import Q
from django.shortcuts import render, get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .models import Course, Enrollment, PromoCode
from .forms import CourseForm
from site_core.models import Category
class CourseListView(ListView):
    model = Course
    template_name = 'courses/list.html'
    context_object_name = 'courses'
    paginate_by = 20
    
    def get_queryset(self):
        queryset = Course.objects.filter(status='approved').select_related('instructor', 'category')
        
        category = self.request.GET.get('category')
        level = self.request.GET.get('level')
        mode = self.request.GET.get('mode')
        search = self.request.GET.get('search')
        
        if category:
            queryset = queryset.filter(category__name=category)
        if level:
            queryset = queryset.filter(level=level)
        if mode:
            queryset = queryset.filter(mode=mode)
        if search:
            queryset = queryset.filter(
                Q(title__icontains=search) |
                Q(description__icontains=search)
            )
            
        return queryset
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.filter(category_type="course", is_active=True)
        return context

class CourseDetailView(DetailView):
    model = Course
    template_name = 'courses/detail.html'
    context_object_name = 'course'

class CourseCreateView(LoginRequiredMixin, CreateView):
    model = Course
    form_class = CourseForm
    template_name = 'courses/create.html'
    success_url = reverse_lazy('courses_list')
    
    def form_valid(self, form):
        form.instance.instructor = self.request.user
        form.instance.status = 'pending'
        return super().form_valid(form)

class CourseUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Course
    form_class = CourseForm
    template_name = 'courses/edit.html'
    success_url = reverse_lazy('courses_list')
    
    def test_func(self):
        course = self.get_object()
        return course.instructor == self.request.user










urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.CourseListView.as_view(), name='courses_list'),
    path('<int:pk>/', views.CourseDetailView.as_view(), name='course_detail'),
    path('create/', views.CourseCreateView.as_view(), name='course_create'),
    path('<int:pk>/edit/', views.CourseUpdateView.as_view(), name='course_edit'),
]


models;
from django.db import models
from django.conf import settings
from django.utils import timezone
from site_core.models import Category  # import the global one


class CourseCategory(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

class Course(models.Model):
    LEVELS = [
        ('beginner', 'Beginner'),
        ('intermediate', 'Intermediate'),
        ('advanced', 'Advanced'),
    ]
    
    MODES = [
        ('online', 'Online'),
        ('offline', 'Offline'),
        ('hybrid', 'Hybrid'),
    ]
    
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('pending', 'Pending Approval'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    title = models.CharField(max_length=200)
    description = models.TextField()
    category = models.ForeignKey(CourseCategory, on_delete=models.CASCADE, related_name='courses')
    level = models.CharField(max_length=20, choices=LEVELS, default='beginner')
    instructor = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='courses_taught')
    duration = models.PositiveIntegerField(help_text="Duration in hours")
    mode = models.CharField(max_length=20, choices=MODES, default='online')
    start_date = models.DateTimeField()
    is_self_paced = models.BooleanField(default=False)
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    spots_total = models.PositiveIntegerField(default=1)
    spots_left = models.PositiveIntegerField(default=1)
    preview_video = models.URLField(blank=True)
    thumbnail = models.ImageField(upload_to='course_thumbnails/', blank=True, null=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    rejection_reason = models.TextField(blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name='courses',
        limit_choices_to={'category_type': 'course'}  # only show "course" categories
    )


    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return self.title

    @property
    def instructor_bio(self):
        return self.instructor.profile.bio

    def is_available(self):
        return (self.status == 'approved' and 
                self.spots_left > 0 and 
                (self.is_self_paced or self.start_date > timezone.now()))

class Enrollment(models.Model):
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('active', 'Active'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
    ]

    course = models.ForeignKey(Course, on_delete=models.CASCADE, related_name='enrollments')
    student = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='enrollments')
    enrolled_at = models.DateTimeField(auto_now_add=True)
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')
    final_price = models.DecimalField(max_digits=10, decimal_places=2)
    promo_code_used = models.ForeignKey('PromoCode', on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        unique_together = ['course', 'student']

    def __str__(self):
        return f"{self.student.username} - {self.course.title}"

class PromoCode(models.Model):
    code = models.CharField(max_length=50, unique=True)
    discount_percent = models.DecimalField(max_digits=5, decimal_places=2, default=0)
    discount_amount = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    max_uses = models.PositiveIntegerField(default=1)
    used_count = models.PositiveIntegerField(default=0)
    valid_until = models.DateTimeField()
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.code

    def is_valid(self):
        return (self.is_active and 
                self.used_count < self.max_uses and 
                self.valid_until > timezone.now())



forms.py
from django import forms
from .models import Course
from site_core.models import Category  # adjust import to your app

class CourseForm(forms.ModelForm):
    class Meta:
        model = Course
        fields = [
            'title', 'description', 'category', 'level', 'duration', 
            'mode', 'start_date', 'is_self_paced', 'price', 'spots_total',
            'preview_video', 'thumbnail'
        ]
        widgets = {
            'start_date': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
            'description': forms.Textarea(attrs={'rows': 4}),
            'category': forms.Select(attrs={
                'class': 'mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Only show categories meant for Courses
        self.fields['category'].queryset = Category.objects.filter(category_type='course')  

    def clean(self):
        cleaned_data = super().clean()
        start_date = cleaned_data.get('start_date')
        is_self_paced = cleaned_data.get('is_self_paced')
        
        if not is_self_paced and not start_date:
            raise forms.ValidationError("Start date is required for scheduled courses.")
        
        return cleaned_data



admin.py
from django.contrib import admin
from .models import CourseCategory, Course, Enrollment, PromoCode

@admin.register(CourseCategory)
class CourseCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'is_active', 'course_count')
    list_filter = ('is_active',)
    search_fields = ('name',)
    
    def course_count(self, obj):
        return obj.courses.count()
    course_count.short_description = 'Courses'

@admin.register(Course)
class CourseAdmin(admin.ModelAdmin):
    list_display = ('title', 'instructor', 'category', 'level', 'price', 'spots_left', 'status', 'created_at')
    list_filter = ('status', 'level', 'mode', 'category', 'created_at')
    search_fields = ('title', 'description', 'instructor__username')
    readonly_fields = ('created_at', 'updated_at')
    actions = ['approve_courses', 'reject_courses']
    
    def approve_courses(self, request, queryset):
        updated = queryset.update(status='approved')
        self.message_user(request, f'{updated} courses approved successfully.')
    approve_courses.short_description = "Approve selected courses"
    
    def reject_courses(self, request, queryset):
        for course in queryset:
            course.status = 'rejected'
            course.save()
        self.message_user(request, f'{queryset.count()} courses rejected.')
    reject_courses.short_description = "Reject selected courses"

@admin.register(Enrollment)
class EnrollmentAdmin(admin.ModelAdmin):
    list_display = ('course', 'student', 'status', 'enrolled_at', 'final_price')
    list_filter = ('status', 'enrolled_at')
    search_fields = ('course__title', 'student__username')

@admin.register(PromoCode)
class PromoCodeAdmin(admin.ModelAdmin):
    list_display = ('code', 'discount_percent', 'discount_amount', 'used_count', 'max_uses', 'is_active', 'valid_until')
    list_filter = ('is_active',)
    search_fields = ('code',)



next app: jobs.

jobs/views.py
from django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin
from django.core.paginator import Paginator
from django.db.models import Q
from django.shortcuts import render, get_object_or_404
from django.urls import reverse_lazy
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from .models import Job
from site_core.models import Category   # instead of JobCategory
from .forms import JobForm

class JobListView(ListView):
    model = Job
    template_name = 'jobs/list.html'
    context_object_name = 'jobs'
    paginate_by = 20
    
    def get_queryset(self):
        queryset = Job.objects.filter(status='approved').select_related('posted_by', 'category')
        
        category = self.request.GET.get('category')
        job_type = self.request.GET.get('job_type')
        location = self.request.GET.get('location')
        level = self.request.GET.get('level')
        search = self.request.GET.get('search')
        
        if category:
            queryset = queryset.filter(category__name=category)
        if job_type:
            queryset = queryset.filter(job_type=job_type)
        if location:
            queryset = queryset.filter(location__icontains=location)
        if level:
            queryset = queryset.filter(level_requirement=level)
        if search:
            queryset = queryset.filter(
                Q(title__icontains=search) |
                Q(description__icontains=search) |
                Q(company_name__icontains=search)
            )
            
        return queryset
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['categories'] = Category.objects.filter(category_type="job", is_active=True)
        return context

class JobDetailView(DetailView):
    model = Job
    template_name = 'jobs/detail.html'
    context_object_name = 'job'
    
    def get_object(self):
        obj = super().get_object()
        obj.increment_views()
        return obj

class JobCreateView(LoginRequiredMixin, CreateView):
    model = Job
    form_class = JobForm
    template_name = 'jobs/create.html'
    success_url = reverse_lazy('jobs_list')
    
    def form_valid(self, form):
        form.instance.posted_by = self.request.user
        form.instance.status = 'pending'
        return super().form_valid(form)

class JobUpdateView(LoginRequiredMixin, UserPassesTestMixin, UpdateView):
    model = Job
    form_class = JobForm
    template_name = 'jobs/edit.html'
    success_url = reverse_lazy('jobs_list')
    
    def test_func(self):
        job = self.get_object()
        return job.posted_by == self.request.user

class JobDeleteView(LoginRequiredMixin, UserPassesTestMixin, DeleteView):
    model = Job
    template_name = 'jobs/delete.html'
    success_url = reverse_lazy('jobs_list')
    
    def test_func(self):
        job = self.get_object()
        return job.posted_by == self.request.user


jobs urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.JobListView.as_view(), name='jobs_list'),
    path('<int:pk>/', views.JobDetailView.as_view(), name='job_detail'),
    path('create/', views.JobCreateView.as_view(), name='job_create'),
    path('<int:pk>/edit/', views.JobUpdateView.as_view(), name='job_edit'),
    path('<int:pk>/delete/', views.JobDeleteView.as_view(), name='job_delete'),
]


jobs models
from django.db import models
from django.conf import settings
from site_core.models import Category  # import the global one
from django.utils import timezone

class JobCategory(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

class Job(models.Model):
    JOB_TYPES = [
        ('full_time', 'Full Time'),
        ('part_time', 'Part Time'),
        ('contract', 'Contract'),
        ('freelance', 'Freelance'),
        ('internship', 'Internship'),
    ]
    
    LEVELS = [
        ('entry', 'Entry Level'),
        ('mid', 'Mid Level'),
        ('senior', 'Senior Level'),
        ('executive', 'Executive'),
    ]
    
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('pending', 'Pending Approval'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    title = models.CharField(max_length=200)
    description = models.TextField()
    category = models.ForeignKey(JobCategory, on_delete=models.CASCADE, related_name='jobs')
    job_type = models.CharField(max_length=20, choices=JOB_TYPES)
    location = models.CharField(max_length=100)
    company_name = models.CharField(max_length=100)
    company_logo = models.ImageField(upload_to='company_logos/', blank=True, null=True)
    salary_min = models.DecimalField(max_digits=10, decimal_places=2)
    salary_max = models.DecimalField(max_digits=10, decimal_places=2)
    deadline = models.DateTimeField()
    spots_total = models.PositiveIntegerField(default=1)
    spots_left = models.PositiveIntegerField(default=1)
    level_requirement = models.CharField(max_length=20, choices=LEVELS, default='entry')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    posted_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='posted_jobs')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    rejection_reason = models.TextField(blank=True)
    views_count = models.PositiveIntegerField(default=0)
    favorites = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='favorite_jobs', blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    category = models.ForeignKey(
        Category,
        on_delete=models.CASCADE,
        related_name='jobs',
        limit_choices_to={'category_type': 'course'}  # only show "course" categories
    )


  

    # 🔑 FIX: unique related_name values
    posted_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='dashboard_posted_jobs'  # changed
    )
    favorites = models.ManyToManyField(
        settings.AUTH_USER_MODEL,
        related_name='dashboard_favorite_jobs',  # changed
        blank=True
    )

    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    rejection_reason = models.TextField(blank=True)
    views_count = models.PositiveIntegerField(default=0)

    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        if self.deadline and self.deadline < timezone.now():
            self.spots_left = 0
        super().save(*args, **kwargs)

    def is_active(self):
        return (
            self.status == 'approved' and
            self.spots_left > 0 and
            self.deadline > timezone.now()
        )

    def increment_views(self):
        self.views_count += 1
        self.save(update_fields=['views_count'])




forms;
from django import forms
from .models import Job
from site_core.models import Category  # adjust this to your project path

class JobForm(forms.ModelForm):
    class Meta:
        model = Job
        fields = [
            'title', 'description', 'category', 'job_type', 'location', 
            'company_name', 'salary_min', 'salary_max', 'deadline', 
            'spots_total', 'level_requirement', 'price'
        ]
        widgets = {
            'deadline': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
            'description': forms.Textarea(attrs={'rows': 4}),
            'category': forms.Select(attrs={
                'class': 'mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500'
            }),
        }

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Only show categories meant for Jobs
        self.fields['category'].queryset = Category.objects.filter(category_type='job')

    def clean(self):
        cleaned_data = super().clean()
        salary_min = cleaned_data.get('salary_min')
        salary_max = cleaned_data.get('salary_max')
        
        if salary_min and salary_max and salary_min > salary_max:
            raise forms.ValidationError("Minimum salary cannot be greater than maximum salary.")
        
        return cleaned_data



admin.py
from django.contrib import admin
from .models import JobCategory, Job


@admin.register(JobCategory)
class JobCategoryAdmin(admin.ModelAdmin):
    list_display = ('name', 'is_active', 'job_count')
    list_filter = ('is_active',)
    search_fields = ('name',)

    def job_count(self, obj):
        return obj.jobs.count()
    job_count.short_description = 'Jobs'


@admin.register(Job)
class JobAdmin(admin.ModelAdmin):
    list_display = (
        'title', 'company_name', 'job_type', 'location',
        'salary_min', 'salary_max', 'status', 'posted_by', 'created_at'
    )
    list_filter = ('status', 'job_type', 'level_requirement', 'category', 'created_at')
    search_fields = ('title', 'company_name', 'description')
    readonly_fields = ('created_at', 'updated_at', 'views_count')
    actions = ['approve_jobs', 'reject_jobs']

    def approve_jobs(self, request, queryset):
        updated = queryset.update(status='approved')
        self.message_user(request, f'{updated} jobs approved successfully.')
    approve_jobs.short_description = "Approve selected jobs"

    def reject_jobs(self, request, queryset):
        for job in queryset:
            job.status = 'rejected'
            job.save()
        self.message_user(request, f'{queryset.count()} jobs rejected.')
    reject_jobs.short_description = "Reject selected jobs"




Next app, notification;
views.py;
from django.contrib.auth.decorators import login_required
from django.core.paginator import Paginator
from django.db.models import Q
from django.shortcuts import render
from payments.models import Transaction
from .models import Notification
from .forms import TransactionFilterForm
from .utils import mask_email


from django.shortcuts import redirect, get_object_or_404
from django.views.decorators.http import require_POST

@login_required
@require_POST
def mark_all_notifications_read(request):
    Notification.objects.filter(user=request.user, is_read=False).update(is_read=True)
    return redirect('/transactions/notifications')  # use the name of your notification list url


@login_required
@require_POST
def mark_notification_read(request, pk):
    notification = get_object_or_404(Notification, id=pk, user=request.user)
    notification.is_read = True
    notification.save()
    return redirect('/transactions/notifications')


@login_required
def transactions_list(request):
    transactions = Transaction.objects.filter(user=request.user).select_related('payment_method')
    
    form = TransactionFilterForm(request.GET)
    if form.is_valid():
        transaction_type = form.cleaned_data.get('transaction_type')
        status = form.cleaned_data.get('status')
        start_date = form.cleaned_data.get('start_date')
        end_date = form.cleaned_data.get('end_date')
        
        if transaction_type:
            transactions = transactions.filter(transaction_type=transaction_type)
        if status:
            transactions = transactions.filter(status=status)
        if start_date:
            transactions = transactions.filter(created_at__date__gte=start_date)
        if end_date:
            transactions = transactions.filter(created_at__date__lte=end_date)
    
    paginator = Paginator(transactions, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'transactions': page_obj,
        'form': form,
    }
    return render(request, 'transactions/list.html', context)

@login_required
def transaction_detail(request, pk):
    transaction = Transaction.objects.filter(user=request.user, pk=pk).first()
    if not transaction:
        from django.http import Http404
        raise Http404("Transaction not found")
    
    context = {
        'transaction': transaction,
    }
    return render(request, 'transactions/detail.html', context)

@login_required
def notifications_list(request):
    notifications = Notification.objects.filter(user=request.user)
    
    unread_count = notifications.filter(is_read=False).count()
    
    paginator = Paginator(notifications, 20)
    page_number = request.GET.get('page')
    page_obj = paginator.get_page(page_number)
    
    context = {
        'page_obj': page_obj,
        'notifications': page_obj,
        'unread_count': unread_count,
    }
    return render(request, 'transactions/notifications.html', context)



urls.py; 
from django.urls import path
from . import views

urlpatterns = [
    path('transactions/', views.transactions_list, name='transactions_list'),
    path('transactions/<int:pk>/', views.transaction_detail, name='transaction_detail'),

    path('notifications/', views.notifications_list, name='notifications_list'),
    path('notifications/mark-all/', views.mark_all_notifications_read, name='mark_all_notifications_read'),
    path('notifications/<int:pk>/mark/', views.mark_notification_read, name='mark_notification_read'),
]




utils.py: 
def mask_email(email):
    """
    Mask email address for display in transaction tables.
    Example: 'abcdef@gmail.com' -> 'abc***@gm...om'
    """
    if not email or '@' not in email:
        return email
    
    local_part, domain = email.split('@')
    
    # Mask local part - show first 3 characters
    if len(local_part) > 3:
        masked_local = local_part[:3] + '***'
    else:
        masked_local = local_part + '***'
    
    # Mask domain - show first 2 and last 2 characters
    domain_parts = domain.split('.')
    if len(domain_parts) >= 2:
        main_domain = '.'.join(domain_parts[:-1])
        tld = domain_parts[-1]
        
        if len(main_domain) > 2:
            masked_domain = main_domain[:2] + '...' + main_domain[-1:] if len(main_domain) > 3 else main_domain
        else:
            masked_domain = main_domain
            
        masked_domain += '.' + tld
    else:
        masked_domain = domain[:2] + '...' + domain[-2:] if len(domain) > 4 else domain
    
    return f"{masked_local}@{masked_domain}"

def to_display_currency(amount, currency, currency_rate=1):
    """
    Convert amount to display currency using currency rate.
    """
    if currency.upper() == 'USD':
        return amount * currency_rate
    return amount


models.py
from django.db import models
from django.conf import settings

class Notification(models.Model):
    NOTIFICATION_TYPES = [
        ('transaction', 'Transaction'),
        ('approval', 'Approval'),
        ('system', 'System'),
        ('promotion', 'Promotion'),
    ]
    
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notifications')
    notification_type = models.CharField(max_length=20, choices=NOTIFICATION_TYPES)
    title = models.CharField(max_length=200)
    message = models.TextField()
    is_read = models.BooleanField(default=False)
    related_object_id = models.PositiveIntegerField(null=True, blank=True)
    related_content_type = models.CharField(max_length=100, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.user.username} - {self.title}"

    def mark_as_read(self):
        self.is_read = True
        self.save()



forms.py
from django import forms
from payments.models import Transaction

class TransactionFilterForm(forms.Form):
    TRANSACTION_TYPES = [
        ('', 'All Types'),
        ('add_money', 'Add Money'),
        ('withdraw', 'Withdraw'),
        ('transfer', 'Transfer'),
        ('sale', 'Sale'),
        ('commission', 'Commission'),
    ]
    
    STATUS_CHOICES = [
        ('', 'All Statuses'),
        ('pending', 'Pending'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
        ('completed', 'Completed'),
    ]
    
    transaction_type = forms.ChoiceField(choices=TRANSACTION_TYPES, required=False)
    status = forms.ChoiceField(choices=STATUS_CHOICES, required=False)
    start_date = forms.DateField(required=False, widget=forms.DateInput(attrs={'type': 'date'}))
    end_date = forms.DateField(required=False, widget=forms.DateInput(attrs={'type': 'date'}))



admin.py
from django.contrib import admin
from .models import Notification

@admin.register(Notification)
class NotificationAdmin(admin.ModelAdmin):
    list_display = ('user', 'title', 'notification_type', 'is_read', 'created_at')
    list_filter = ('notification_type', 'is_read', 'created_at')
    search_fields = ('user__username', 'title', 'message')
    readonly_fields = ('created_at',)
    actions = ['mark_as_read']

    def mark_as_read(self, request, queryset):
        updated = queryset.update(is_read=True)
        self.message_user(request, f'{updated} notifications marked as read.')
    mark_as_read.short_description = "Mark selected notifications as read"






You might need api app too, let me share:
views.py;
from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.pagination import PageNumberPagination
from django_filters.rest_framework import DjangoFilterBackend
from rest_framework.filters import SearchFilter, OrderingFilter
from accounts.models import User
from jobs.models import Job
from courses.models import Course
from products.models import Product
from payments.models import Transaction
from affiliates.models import AffiliateSale
from blog.models import BlogPost
from .serializers import (
    UserSerializer, JobSerializer, CourseSerializer, ProductSerializer,
    TransactionSerializer, AffiliateSaleSerializer, BlogPostSerializer
)

class StandardResultsSetPagination(PageNumberPagination):
    page_size = 20
    page_size_query_param = 'page_size'
    max_page_size = 100

class JobViewSet(viewsets.ModelViewSet):
    queryset = Job.objects.filter(status='approved').select_related('posted_by', 'category')
    serializer_class = JobSerializer
    pagination_class = StandardResultsSetPagination
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['category', 'job_type', 'level_requirement']
    search_fields = ['title', 'description', 'company_name']
    ordering_fields = ['created_at', 'price', 'salary_min']
    ordering = ['-created_at']
    
    def perform_create(self, serializer):
        serializer.save(posted_by=self.request.user, status='pending')

class CourseViewSet(viewsets.ModelViewSet):
    queryset = Course.objects.filter(status='approved').select_related('instructor', 'category')
    serializer_class = CourseSerializer
    pagination_class = StandardResultsSetPagination
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['category', 'level', 'mode']
    search_fields = ['title', 'description']
    ordering_fields = ['created_at', 'price', 'start_date']
    ordering = ['-created_at']
    
    def perform_create(self, serializer):
        serializer.save(instructor=self.request.user, status='pending')

class ProductViewSet(viewsets.ModelViewSet):
    queryset = Product.objects.filter(status='approved').select_related('seller', 'category')
    serializer_class = ProductSerializer
    pagination_class = StandardResultsSetPagination
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['category', 'license_type']
    search_fields = ['title', 'description']
    ordering_fields = ['created_at', 'price']
    ordering = ['-created_at']
    
    def perform_create(self, serializer):
        serializer.save(seller=self.request.user, status='pending')

class TransactionViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = TransactionSerializer
    pagination_class = StandardResultsSetPagination
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_fields = ['transaction_type', 'status']
    ordering_fields = ['created_at', 'amount']
    ordering = ['-created_at']
    
    def get_queryset(self):
        return Transaction.objects.filter(user=self.request.user)

class AffiliateSaleViewSet(viewsets.ReadOnlyModelViewSet):
    serializer_class = AffiliateSaleSerializer
    pagination_class = StandardResultsSetPagination
    
    def get_queryset(self):
        return AffiliateSale.objects.filter(referral__referrer=self.request.user)

class BlogPostViewSet(viewsets.ModelViewSet):
    queryset = BlogPost.objects.filter(status='published').select_related('author', 'category')
    serializer_class = BlogPostSerializer
    pagination_class = StandardResultsSetPagination
    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]
    filterset_fields = ['category']
    search_fields = ['title', 'content', 'excerpt']
    ordering_fields = ['created_at', 'views_count']
    ordering = ['-created_at']
    
    def perform_create(self, serializer):
        serializer.save(author=self.request.user, status='pending')



urls.py
from django.urls import path, include
from rest_framework.routers import DefaultRouter
from . import views

router = DefaultRouter()
router.register(r'jobs', views.JobViewSet, basename='job')
router.register(r'courses', views.CourseViewSet, basename='course')
router.register(r'products', views.ProductViewSet, basename='product')
router.register(r'transactions', views.TransactionViewSet, basename='transaction')
router.register(r'affiliate-sales', views.AffiliateSaleViewSet, basename='affiliate-sale')
router.register(r'blog-posts', views.BlogPostViewSet, basename='blog-post')

urlpatterns = [
    path('', include(router.urls)),
    path('api-auth/', include('rest_framework.urls')),
]




serializers.py
from rest_framework import serializers
from accounts.models import User, UserProfile
from jobs.models import Job, JobCategory
from courses.models import Course, CourseCategory, Enrollment
from products.models import Product, ProductCategory, ProductSale
from affiliates.models import Referral, AffiliateSale
from payments.models import Transaction
from blog.models import BlogPost, Category, BlogComment

class UserProfileSerializer(serializers.ModelSerializer):
    class Meta:
        model = UserProfile
        fields = ['bio', 'profile_picture', 'country', 'phone_number', 'date_joined']

class UserSerializer(serializers.ModelSerializer):
    profile = UserProfileSerializer(read_only=True)
    
    class Meta:
        model = User
        fields = ['id', 'username', 'email', 'first_name', 'last_name', 'subscription_level', 'profile']

class JobCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = JobCategory
        fields = ['id', 'name', 'description']

class JobSerializer(serializers.ModelSerializer):
    posted_by = UserSerializer(read_only=True)
    category = JobCategorySerializer(read_only=True)
    
    class Meta:
        model = Job
        fields = [
            'id', 'title', 'description', 'category', 'job_type', 'location',
            'company_name', 'salary_min', 'salary_max', 'deadline', 'spots_total',
            'spots_left', 'level_requirement', 'price', 'posted_by', 'status',
            'views_count', 'created_at'
        ]
        read_only_fields = ['posted_by', 'status', 'views_count', 'created_at']

class CourseCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = CourseCategory
        fields = ['id', 'name', 'description']

class CourseSerializer(serializers.ModelSerializer):
    instructor = UserSerializer(read_only=True)
    category = CourseCategorySerializer(read_only=True)
    
    class Meta:
        model = Course
        fields = [
            'id', 'title', 'description', 'category', 'level', 'instructor',
            'duration', 'mode', 'start_date', 'is_self_paced', 'price',
            'spots_total', 'spots_left', 'preview_video', 'thumbnail', 'status',
            'created_at'
        ]
        read_only_fields = ['instructor', 'status', 'created_at']

class ProductCategorySerializer(serializers.ModelSerializer):
    class Meta:
        model = ProductCategory
        fields = ['id', 'name', 'description']

class ProductSerializer(serializers.ModelSerializer):
    seller = UserSerializer(read_only=True)
    category = ProductCategorySerializer(read_only=True)
    
    class Meta:
        model = Product
        fields = [
            'id', 'title', 'description', 'category', 'seller', 'license_type',
            'version', 'price', 'product_file', 'sample_file', 'thumbnail',
            'status', 'views_count', 'download_count', 'created_at'
        ]
        read_only_fields = ['seller', 'status', 'views_count', 'download_count', 'created_at']

class TransactionSerializer(serializers.ModelSerializer):
    user = UserSerializer(read_only=True)
    
    class Meta:
        model = Transaction
        fields = [
            'id', 'user', 'transaction_type', 'amount', 'currency', 'status',
            'payment_method', 'reference', 'description', 'metadata',
            'rejection_reason', 'created_at', 'completed_at'
        ]
        read_only_fields = ['user', 'reference', 'created_at', 'completed_at']

class AffiliateSaleSerializer(serializers.ModelSerializer):
    referral = serializers.StringRelatedField()
    
    class Meta:
        model = AffiliateSale
        fields = [
            'id', 'referral', 'commission_amount', 'commission_rate', 'status',
            'created_at', 'paid_at'
        ]

class BlogPostSerializer(serializers.ModelSerializer):
    author = UserSerializer(read_only=True)
    category = serializers.StringRelatedField()
    
    class Meta:
        model = BlogPost
        fields = [
            'id', 'title', 'slug', 'content', 'excerpt', 'author', 'category',
            'featured_image', 'status', 'is_featured', 'views_count', 'created_at',
            'published_at'
        ]
        read_only_fields = ['author', 'slug', 'views_count', 'created_at', 'published_at']



NOW, Templates folders that you might need:
templates/admin_panel, accounts, jobs, course, products, admin_panel, payments, transactions.

here are they (I only share some i think  u might need to make corrections): Now, admin_panel.
admin_panel/settings.html
{% extends 'base.html' %}

{% block title %}Site Settings - Vinaji NG{% endblock %}

{% block content %}
<div class="max-w-4xl mx-auto">
    <div class="bg-white rounded-lg shadow-lg p-6">
        <h1 class="text-2xl font-bold text-gray-900 mb-6">Site Settings</h1>

        <form method="post" class="space-y-8">
            {% csrf_token %}
            
            <!-- Currency Settings -->
            <div class="border-b border-gray-200 pb-6">
                <h2 class="text-lg font-semibold text-gray-900 mb-4">Currency Settings</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                        <label for="currency" class="block text-sm font-medium text-gray-700">Base Currency</label>
                        <select name="currency" id="currency" required
                                class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                            <option value="NGN" {% if site_settings.currency == 'NGN' %}selected{% endif %}>Nigerian Naira (NGN)</option>
                            <option value="USD" {% if site_settings.currency == 'USD' %}selected{% endif %}>US Dollar (USD)</option>
                        </select>
                    </div>
                    <div>
                        <label for="currency_rate" class="block text-sm font-medium text-gray-700">Currency Rate (to USD)</label>
                        <input type="number" name="currency_rate" id="currency_rate" required step="0.0001"
                               value="{{ site_settings.currency_rate|default:'1.0' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                </div>
            </div>

            <!-- Fee Settings -->
            <div class="border-b border-gray-200 pb-6">
                <h2 class="text-lg font-semibold text-gray-900 mb-4">Fee Settings (%)</h2>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    <div>
                        <label for="add_money_fee_pct" class="block text-sm font-medium text-gray-700">Add Money Fee</label>
                        <input type="number" name="add_money_fee_pct" id="add_money_fee_pct" required step="0.01" min="0" max="100"
                               value="{{ site_settings.add_money_fee_pct|default:'1.5' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    <div>
                        <label for="transfer_fee_pct" class="block text-sm font-medium text-gray-700">Transfer Fee</label>
                        <input type="number" name="transfer_fee_pct" id="transfer_fee_pct" required step="0.01" min="0" max="100"
                               value="{{ site_settings.transfer_fee_pct|default:'0.5' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    <div>
                        <label for="withdraw_fee_pct" class="block text-sm font-medium text-gray-700">Withdraw Fee</label>
                        <input type="number" name="withdraw_fee_pct" id="withdraw_fee_pct" required step="0.01" min="0" max="100"
                               value="{{ site_settings.withdraw_fee_pct|default:'2.0' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    <div>
                        <label for="mentorship_fee_pct" class="block text-sm font-medium text-gray-700">Mentorship Fee</label>
                        <input type="number" name="mentorship_fee_pct" id="mentorship_fee_pct" required step="0.01" min="0" max="100"
                               value="{{ site_settings.mentorship_fee_pct|default:'10.0' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    <div>
                        <label for="default_commission_pct" class="block text-sm font-medium text-gray-700">Default Commission</label>
                        <input type="number" name="default_commission_pct" id="default_commission_pct" required step="0.01" min="0" max="100"
                               value="{{ site_settings.default_commission_pct|default:'20.0' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                </div>
            </div>

            <!-- Feature Toggles -->
            <div class="border-b border-gray-200 pb-6">
                <h2 class="text-lg font-semibold text-gray-900 mb-4">Feature Toggles</h2>
                <div class="space-y-4">
                    <div class="flex items-center">
                        <input type="checkbox" name="pause_course_uploading" id="pause_course_uploading" 
                               {% if site_settings.pause_course_uploading %}checked{% endif %}
                               class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
                        <label for="pause_course_uploading" class="ml-2 block text-sm text-gray-700">
                            Pause new course uploads
                        </label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" name="pause_gigs_uploading" id="pause_gigs_uploading"
                               {% if site_settings.pause_gigs_uploading %}checked{% endif %}
                               class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
                        <label for="pause_gigs_uploading" class="ml-2 block text-sm text-gray-700">
                            Pause new gigs/jobs uploads
                        </label>
                    </div>
                    <div class="flex items-center">
                        <input type="checkbox" name="pause_affiliates" id="pause_affiliates"
                               {% if site_settings.pause_affiliates %}checked{% endif %}
                               class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
                        <label for="pause_affiliates" class="ml-2 block text-sm text-gray-700">
                            Pause affiliate program
                        </label>
                    </div>
                </div>
            </div>
<!-- Add this section after the Feature Toggles section in your existing settings.html -->

<!-- Payment Settings -->
<div class="border-b border-gray-200 pb-6">
    <h2 class="text-lg font-semibold text-gray-900 mb-4">Payment Settings</h2>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
        <!-- Deposit Mode -->
        <div>
            <label for="deposit_mode" class="block text-sm font-medium text-gray-700">Deposit Mode</label>
            <select name="deposit_mode" id="deposit_mode" required
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                <option value="manual" {% if site_settings.deposit_mode == 'manual' %}selected{% endif %}>Manual Approval</option>
                <option value="auto" {% if site_settings.deposit_mode == 'auto' %}selected{% endif %}>Auto Process</option>
            </select>
        </div>
        
        <!-- Withdrawal Mode -->
        <div>
            <label for="withdrawal_mode" class="block text-sm font-medium text-gray-700">Withdrawal Mode</label>
            <select name="withdrawal_mode" id="withdrawal_mode" required
                    class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                <option value="manual" {% if site_settings.withdrawal_mode == 'manual' %}selected{% endif %}>Manual Approval</option>
                <option value="auto" {% if site_settings.withdrawal_mode == 'auto' %}selected{% endif %}>Auto Process</option>
            </select>
        </div>
    </div>
    
    <!-- Manual Payment Details -->
    <div class="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
            <label for="manual_bank_name" class="block text-sm font-medium text-gray-700">Bank Name</label>
            <input type="text" name="manual_bank_name" id="manual_bank_name"
                   value="{{ site_settings.manual_bank_name|default:'' }}"
                   placeholder="e.g., GTBank, Zenith Bank"
                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
        </div>
        <div>
            <label for="manual_account_number" class="block text-sm font-medium text-gray-700">Account Number</label>
            <input type="text" name="manual_account_number" id="manual_account_number"
                   value="{{ site_settings.manual_account_number|default:'' }}"
                   placeholder="10-digit account number"
                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
        </div>
        <div>
            <label for="manual_account_name" class="block text-sm font-medium text-gray-700">Account Name</label>
            <input type="text" name="manual_account_name" id="manual_account_name"
                   value="{{ site_settings.manual_account_name|default:'' }}"
                   placeholder="Account holder name"
                   class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
        </div>
    </div>
</div>

<!-- API Keys Section -->
<div class="border-b border-gray-200 pb-6">
    <h2 class="text-lg font-semibold text-gray-900 mb-4">Payment Gateway API Keys</h2>
    <div class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label for="monnify_api_key" class="block text-sm font-medium text-gray-700">Monnify API Key</label>
                <input type="password" name="monnify_api_key" id="monnify_api_key"
                       value="{{ site_settings.monnify_api_key|default:'' }}"
                       placeholder="Monnify API Key"
                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
            </div>
            <div>
                <label for="monnify_secret_key" class="block text-sm font-medium text-gray-700">Monnify Secret Key</label>
                <input type="password" name="monnify_secret_key" id="monnify_secret_key"
                       value="{{ site_settings.monnify_secret_key|default:'' }}"
                       placeholder="Monnify Secret Key"
                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
            </div>
        </div>
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
                <label for="paystack_public_key" class="block text-sm font-medium text-gray-700">Paystack Public Key</label>
                <input type="password" name="paystack_public_key" id="paystack_public_key"
                       value="{{ site_settings.paystack_public_key|default:'' }}"
                       placeholder="Paystack Public Key"
                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
            </div>
            <div>
                <label for="paystack_secret_key" class="block text-sm font-medium text-gray-700">Paystack Secret Key</label>
                <input type="password" name="paystack_secret_key" id="paystack_secret_key"
                       value="{{ site_settings.paystack_secret_key|default:'' }}"
                       placeholder="Paystack Secret Key"
                       class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
            </div>
        </div>
    </div>
</div>

            <!-- Site Information -->
            <div class="border-b border-gray-200 pb-6">
                <h2 class="text-lg font-semibold text-gray-900 mb-4">Site Information</h2>
                <div class="space-y-4">
                    <div>
                        <label for="site_title" class="block text-sm font-medium text-gray-700">Site Title</label>
                        <input type="text" name="site_title" id="site_title" required
                               value="{{ site_settings.site_title|default:'Vinaji NG' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    <div>
                        <label for="site_description" class="block text-sm font-medium text-gray-700">Site Description</label>
                        <textarea name="site_description" id="site_description" rows="3"
                                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">{{ site_settings.site_description|default:'' }}</textarea>
                    </div>
                    <div>
                        <label for="contact_email" class="block text-sm font-medium text-gray-700">Contact Email</label>
                        <input type="email" name="contact_email" id="contact_email" required
                               value="{{ site_settings.contact_email|default:'support@vinaji.com' }}"
                               class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">
                    </div>
                    <div>
                        <label for="legal_text" class="block text-sm font-medium text-gray-700">Legal Text</label>
                        <textarea name="legal_text" id="legal_text" rows="4"
                                  class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-green-500">{{ site_settings.legal_text|default:'' }}</textarea>
                    </div>
                </div>
            </div>

            <!-- Submit Button -->
            <div class="flex justify-end">
                <button type="submit" class="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 transition-colors font-semibold">
                    Save Settings
                </button>
            </div>
        </form>
    </div>

    <!-- Danger Zone -->
    <div class="bg-white rounded-lg shadow-lg p-6 mt-6 border border-red-200">
        <h2 class="text-lg font-semibold text-red-900 mb-4">Danger Zone</h2>
        <div class="space-y-4">
            <div class="flex items-center justify-between">
                <div>
                    <h3 class="font-medium text-red-800">Clear All Cache</h3>
                    <p class="text-red-700 text-sm">Clear all cached data and settings</p>
                </div>
                <button type="button" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                    Clear Cache
                </button>
            </div>
            <div class="flex items-center justify-between">
                <div>
                    <h3 class="font-medium text-red-800">Reset to Defaults</h3>
                    <p class="text-red-700 text-sm">Reset all settings to default values</p>
                </div>
                <button type="button" class="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors">
                    Reset Settings
                </button>
            </div>
        </div>
    </div>
</div>
{% endblock %}


































Finally. let me share the dashbord (user own) html and backend codes:

dashboard.html
{% extends 'base.html' %}

{% block title %}Dashboard - Vinaji NG{% endblock %}

{% block content %}
<div class="space-y-6">
    <!-- Welcome Section -->
    <div class="bg-white rounded-lg shadow-lg p-6">
        <h1 class="text-2xl font-bold text-gray-900">Welcome back, {{ user.first_name|default:user.username }}! 👋</h1>
        <p class="text-gray-600 mt-2">Here's what's happening with your account today.</p>
        
        <!-- Profile Completion Alert -->
        {% if not profile_complete %}
        <div class="mt-4 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div class="flex items-center">
                <i class="fas fa-exclamation-triangle text-yellow-600 mr-3"></i>
                <div>
                    <h3 class="text-yellow-800 font-semibold">Complete Your Profile</h3>
                    <p class="text-yellow-700 text-sm mt-1">
                        Complete your profile to unlock content creation features. 
                        <a href="{% url 'profile_edit' %}" class="font-semibold underline">Complete now →</a>
                    </p>
                </div>
            </div>
        </div>
        {% endif %}
    </div>

    <!-- Stats Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <!-- Balance Card -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-green-100 text-green-600">
                    <i class="fas fa-wallet text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Wallet Balance</p>
                    <p class="text-2xl font-bold text-gray-900">₦{{ balance.total|default:"0.00" }}</p>
                </div>
            </div>
        </div>

        <!-- Weekly Earnings -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-blue-100 text-blue-600">
                    <i class="fas fa-chart-line text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">This Week</p>
                    <p class="text-2xl font-bold text-gray-900">₦{{ weekly_earnings|default:"0.00" }}</p>
                </div>
            </div>
        </div>

        <!-- Monthly Earnings -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-purple-100 text-purple-600">
                    <i class="fas fa-calendar text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">This Month</p>
                    <p class="text-2xl font-bold text-gray-900">₦{{ monthly_earnings|default:"0.00" }}</p>
                </div>
            </div>
        </div>

        <!-- Total Listings -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center">
                <div class="p-3 rounded-full bg-orange-100 text-orange-600">
                    <i class="fas fa-briefcase text-xl"></i>
                </div>
                <div class="ml-4">
                    <p class="text-sm font-medium text-gray-600">Active Listings</p>
                    <p class="text-2xl font-bold text-gray-900">{{ total_listings|default:"0" }}</p>
                </div>
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <!-- Platform Analytics -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">🏆 This Week's Top Earners</h2>
            <div class="space-y-3">
                {% for earner in top_earners_week %}
                <div class="flex items-center justify-between p-3 border rounded-lg">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-green-100 rounded-full flex items-center justify-center">
                            <i class="fas fa-crown text-green-600 text-sm"></i>
                        </div>
                        <div>
                            <p class="font-medium text-gray-900">{{ earner.user__username }}</p>
                            <p class="text-xs text-gray-500">Joined {{ earner.user__date_joined|date:"M Y" }}</p>
                        </div>
                    </div>
                    <span class="text-green-600 font-semibold">₦{{ earner.total_earned }}</span>
                </div>
                {% empty %}
                <p class="text-gray-500 text-center py-4">No earnings data this week.</p>
                {% endfor %}
            </div>
        </div>

        <!-- Top Referrers -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">👥 Top Referrers This Week</h2>
            <div class="space-y-3">
                {% for referrer in top_referrers_week %}
                <div class="flex items-center justify-between p-3 border rounded-lg">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                            <i class="fas fa-users text-blue-600 text-sm"></i>
                        </div>
                        <div>
                            <p class="font-medium text-gray-900">{{ referrer.referrer__username }}</p>
                            <p class="text-xs text-gray-500">Joined {{ referrer.referrer__date_joined|date:"M Y" }}</p>
                        </div>
                    </div>
                    <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-xs font-semibold">
                        {{ referrer.referral_count }} referrals
                    </span>
                </div>
                {% empty %}
                <p class="text-gray-500 text-center py-4">No referral data this week.</p>
                {% endfor %}
            </div>
        </div>

        <!-- Recent Transactions -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <h2 class="text-lg font-semibold text-gray-900 mb-4">💳 Recent Transactions</h2>
            <div class="space-y-3">
                {% for transaction in recent_transactions %}
                <div class="flex items-center justify-between p-3 border rounded-lg">
                    <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 rounded-full flex items-center justify-center 
                                    {% if transaction.transaction_type == 'add_money' %}bg-green-100 text-green-600
                                    {% elif transaction.transaction_type == 'withdraw' %}bg-red-100 text-red-600
                                    {% else %}bg-blue-100 text-blue-600{% endif %}">
                            <i class="fas 
                                {% if transaction.transaction_type == 'add_money' %}fa-arrow-down
                                {% elif transaction.transaction_type == 'withdraw' %}fa-arrow-up
                                {% else %}fa-exchange-alt{% endif %} text-sm">
                            </i>
                        </div>
                        <div>
                            <p class="font-medium text-gray-900">{{ transaction.get_transaction_type_display }}</p>
                            <p class="text-xs text-gray-500">{{ transaction.created_at|timesince }} ago</p>
                        </div>
                    </div>
                    <span class="{% if transaction.transaction_type == 'add_money' %}text-green-600
                                {% elif transaction.transaction_type == 'withdraw' %}text-red-600
                                {% else %}text-blue-600{% endif %} font-semibold">
                        ₦{{ transaction.amount }}
                    </span>
                </div>
                {% empty %}
                <p class="text-gray-500 text-center py-4">No recent transactions.</p>
                {% endfor %}
            </div>
        </div>
    </div>

    <!-- Content Breakdown -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
        <!-- Jobs -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-lg font-semibold text-gray-900">💼 Your Jobs</h2>
                <span class="bg-blue-100 text-blue-800 px-2 py-1 rounded-full text-sm font-semibold">
                    {{ active_jobs }} active
                </span>
            </div>
            <p class="text-gray-600 text-sm">Manage your job postings and applications</p>
            <div class="mt-4">
                <a href="{% url 'jobs_list' %}" class="text-blue-600 hover:text-blue-700 font-medium text-sm">
                    View all jobs →
                </a>
            </div>
        </div>

        <!-- Courses -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-lg font-semibold text-gray-900">🎓 Your Courses</h2>
                <span class="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-sm font-semibold">
                    {{ active_courses }} active
                </span>
            </div>
            <p class="text-gray-600 text-sm">Manage your courses and student enrollments</p>
            <div class="mt-4">
                <a href="{% url 'courses_list' %}" class="text-purple-600 hover:text-purple-700 font-medium text-sm">
                    View all courses →
                </a>
            </div>
        </div>

        <!-- Products -->
        <div class="bg-white rounded-lg shadow-lg p-6">
            <div class="flex items-center justify-between mb-4">
                <h2 class="text-lg font-semibold text-gray-900">🛍️ Your Products</h2>
                <span class="bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm font-semibold">
                    {{ active_products }} active
                </span>
            </div>
            <p class="text-gray-600 text-sm">Manage your digital products and sales</p>
            <div class="mt-4">
                <a href="{% url 'products_list' %}" class="text-green-600 hover:text-green-700 font-medium text-sm">
                    View all products →
                </a>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="bg-white rounded-lg shadow-lg p-6">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">Quick Actions</h2>
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
            <a href="{% url 'job_create' %}" class="bg-green-50 border border-green-200 rounded-lg p-4 text-center hover:bg-green-100 transition-colors group">
                <i class="fas fa-briefcase text-green-600 text-2xl mb-2 group-hover:scale-110 transition-transform"></i>
                <p class="font-medium text-green-800">Post a Job</p>
                <p class="text-green-600 text-xs mt-1">Hire talent</p>
            </a>
            <a href="{% url 'course_create' %}" class="bg-blue-50 border border-blue-200 rounded-lg p-4 text-center hover:bg-blue-100 transition-colors group">
                <i class="fas fa-graduation-cap text-blue-600 text-2xl mb-2 group-hover:scale-110 transition-transform"></i>
                <p class="font-medium text-blue-800">Create Course</p>
                <p class="text-blue-600 text-xs mt-1">Share knowledge</p>
            </a>
            <a href="{% url 'product_create' %}" class="bg-purple-50 border border-purple-200 rounded-lg p-4 text-center hover:bg-purple-100 transition-colors group">
                <i class="fas fa-shopping-bag text-purple-600 text-2xl mb-2 group-hover:scale-110 transition-transform"></i>
                <p class="font-medium text-purple-800">Add Product</p>
                <p class="text-purple-600 text-xs mt-1">Sell digital goods</p>
            </a>
            <a href="{% url 'affiliate_dashboard' %}" class="bg-orange-50 border border-orange-200 rounded-lg p-4 text-center hover:bg-orange-100 transition-colors group">
                <i class="fas fa-handshake text-orange-600 text-2xl mb-2 group-hover:scale-110 transition-transform"></i>
                <p class="font-medium text-orange-800">Refer & Earn</p>
                <p class="text-orange-600 text-xs mt-1">Earn commissions</p>
            </a>
        </div>
    </div>
</div>
{% endblock %}











dashboard account backend codes
dashboard/views.py
from django.contrib.auth.decorators import login_required
from django.shortcuts import render
from django.db.models import Sum, Count, Q
from django.utils import timezone
from datetime import timedelta
from payments.models import Transaction
from products.models import ProductSale
from jobs.models import Job
from courses.models import Course
from affiliates.models import Referral
from accounts.models import User

@login_required
def dashboard(request):
    user = request.user
    week_ago = timezone.now() - timedelta(days=7)
    
    # Balance and earnings
    balance_data = Transaction.get_user_balance(user)
    
    # This week's earnings
    weekly_earnings = Transaction.objects.filter(
        user=user,
        status='completed',
        created_at__gte=week_ago,
        transaction_type__in=['sale', 'commission']
    ).aggregate(total=Sum('amount'))['total'] or 0
    
    # Total earnings
    total_earnings = Transaction.objects.filter(
        user=user,
        status='completed',
        transaction_type__in=['sale', 'commission']
    ).aggregate(total=Sum('amount'))['total'] or 0
    
    # Active listings
    active_jobs = Job.objects.filter(posted_by=user, status='approved').count()
    active_courses = Course.objects.filter(instructor=user, status='approved').count()
    active_products = ProductSale.objects.filter(seller=user, status='completed').count()
    active_listings = active_jobs + active_courses + active_products
    
    # Referral earnings
    referral_earnings = Transaction.objects.filter(
        user=user,
        transaction_type='commission',
        status='completed'
    ).aggregate(total=Sum('amount'))['total'] or 0
    
    # Top sales
    top_sales = ProductSale.objects.filter(
        seller=user, 
        status='completed'
    ).select_related('product').order_by('-net_amount')[:3]
    
    # Top products
    top_products = ProductSale.objects.filter(
        seller=user,
        status='completed'
    ).values('product__title').annotate(
        total_sales=Sum('net_amount'),
        sale_count=Count('id')
    ).order_by('-total_sales')[:5]
    
    # Recent jobs
    recent_jobs = Job.objects.filter(
        posted_by=user, 
        status='approved'
    ).order_by('-created_at')[:5]
    
    # Recent courses
    recent_courses = Course.objects.filter(
        instructor=user, 
        status='approved'
    ).order_by('-created_at')[:5]
    
    # Platform analytics (Top performers)
    top_earners_week = Transaction.objects.filter(
        status='completed',
        created_at__gte=week_ago,
        transaction_type__in=['sale', 'commission']
    ).values('user__username').annotate(
        total_earned=Sum('amount')
    ).order_by('-total_earned')[:5]
    
    top_referrers_week = Referral.objects.filter(
        joined_at__gte=week_ago
    ).values('referrer__username').annotate(
        referral_count=Count('id')
    ).order_by('-referral_count')[:5]
    
    context = {
        'balance': balance_data,
        'weekly_earnings': weekly_earnings,
        'total_earnings': total_earnings,
        'active_listings': active_listings,
        'referral_earnings': referral_earnings,
        'top_sales': top_sales,
        'top_products': top_products,
        'recent_jobs': recent_jobs,
        'recent_courses': recent_courses,
        'top_earners_week': top_earners_week,
        'top_referrers_week': top_referrers_week,
    }
    
    return render(request, 'dashboard/dashboard.html', context)



urls.py
from django.urls import path
from . import views

urlpatterns = [
    path('', views.dashboard, name='dashboard'),
]


models.py
from django.db import models
from django.conf import settings
from django.utils import timezone

class JobCategory(models.Model):
    name = models.CharField(max_length=100, unique=True)
    description = models.TextField(blank=True)
    is_active = models.BooleanField(default=True)

    def __str__(self):
        return self.name

class Job(models.Model):
    JOB_TYPES = [
        ('full_time', 'Full Time'),
        ('part_time', 'Part Time'),
        ('contract', 'Contract'),
        ('freelance', 'Freelance'),
        ('internship', 'Internship'),
    ]
    
    LEVELS = [
        ('entry', 'Entry Level'),
        ('mid', 'Mid Level'),
        ('senior', 'Senior Level'),
        ('executive', 'Executive'),
    ]
    
    STATUS_CHOICES = [
        ('draft', 'Draft'),
        ('pending', 'Pending Approval'),
        ('approved', 'Approved'),
        ('rejected', 'Rejected'),
    ]

    title = models.CharField(max_length=200)
    description = models.TextField()
    category = models.ForeignKey(JobCategory, on_delete=models.CASCADE, related_name='jobs')
    job_type = models.CharField(max_length=20, choices=JOB_TYPES)
    location = models.CharField(max_length=100)
    company_name = models.CharField(max_length=100)
    salary_min = models.DecimalField(max_digits=10, decimal_places=2)
    salary_max = models.DecimalField(max_digits=10, decimal_places=2)
    deadline = models.DateTimeField()
    spots_total = models.PositiveIntegerField(default=1)
    spots_left = models.PositiveIntegerField(default=1)
    level_requirement = models.CharField(max_length=20, choices=LEVELS, default='entry')
    price = models.DecimalField(max_digits=10, decimal_places=2, default=0)
    posted_by = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='posted_jobs')
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='draft')
    rejection_reason = models.TextField(blank=True)
    views_count = models.PositiveIntegerField(default=0)
    favorites = models.ManyToManyField(settings.AUTH_USER_MODEL, related_name='favorite_jobs', blank=True)
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return self.title

    def save(self, *args, **kwargs):
        if self.deadline and self.deadline < timezone.now():
            self.spots_left = 0
        super().save(*args, **kwargs)

    def is_active(self):
        return (self.status == 'approved' and 
                self.spots_left > 0 and 
                self.deadline > timezone.now())

    def increment_views(self):
        self.views_count += 1
        self.save(update_fields=['views_count'])



nothing in admin.py.